{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"5f7f4f26-75e8-5a13-92a5-372cfba04107","html":"<p><a href=\"http://eslint.org/\">ESLint</a>可以作为代码审查的工具，来强制的制定一些代码规则或规范来管理、统一一个团队的代码风格。</p>\n<p>你可以将它作为一个代码检查的工具，应用它的规则可以检测出代码中某些潜在的问题或者值得优化的代码，并且，你也可以将它作为一个代码规范的标准来养成你的书写习惯。</p>\n<!--more-->\n<h2>历史</h2>\n<p><a href=\"http://eslint.org/\">ESLint</a>作为一个开源项目，是由Nicholas C. Zakas于2013年6月创建。</p>\n<h2>用法</h2>\n<p><a href=\"http://eslint.org/\">ESLint</a>的用法非常简单，首先在本地初始化项目，安装<code class=\"language-text\">ESLint</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init -y\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save eslint</code></pre>\n      </div>\n<p>在项目根目录下建立<code class=\"language-text\">.eslintrc</code></p>\n<p>在这里，记录下<code class=\"language-text\">rc</code>结尾的文件是什么含义。</p>\n<h3>rc file</h3>\n<blockquote>\n<p>Actually rc stands for. runtime configuration.the rc files configure what software (application) and services are configured to start at runtime, therefore: runtime configuration. —— wiki</p>\n</blockquote>\n<p>在<code class=\"language-text\">Linux</code>下，rc（runtime configuration）代表运行时配置。表示在某种运行环境下自动执行的配置文件。前端常用的例如<code class=\"language-text\">.babelrc</code>、<code class=\"language-text\">.jsbeautifyrc</code>。</p>\n<p>在<a href=\"http://eslint.org\">ESLint</a>中最常用的就是其规则（<a href=\"http://eslint.org/docs/rules/\">rule</a>)。在<code class=\"language-text\">.eslintrc</code>中写入以下规则</p>\n<div class=\"gatsby-highlight\" data-language=\"json\">\n      <pre class=\"language-json\"><code class=\"language-json\">//.eslintrc\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这条规则表示当代码中出现类似<code class=\"language-text\">console.log()</code>这种调试代码时报错。我们可以先新建一个<code class=\"language-text\">my.js</code>文件来故意写一个错误。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fsafs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>可以执行命令先来看下运行结果。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">./node_modules/.bin/eslint my.js</code></pre>\n      </div>\n<p><strong>screenshot</strong></p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/eslint/eslint.png\" alt=\"eslint\"></p>\n<blockquote>\n<p>从上图可以看出，<a href=\"http://eslint.org\">ESLint</a>给出了错误提示，并且告诉了我们代码错误的原因以及错误出现的行列数。该错误为第三行第三列的代码中出现了<code class=\"language-text\">console</code>的表达式。</p>\n</blockquote>\n<p>在<code class=\"language-text\">rule</code>的书写方式中，看到了有<code class=\"language-text\">&quot;no-console&quot;: 2</code>，这样的写法。其实有三个等级。</p>\n<ul>\n<li>0 表示正确</li>\n<li>1 表示警告<code class=\"language-text\">warning</code></li>\n<li>2 表示错误<code class=\"language-text\">error</code></li>\n</ul>\n<p>我们可以将其程度调节到0和1分别看下效果。</p>\n<blockquote>\n<p>0的时候没有任何错误输出，1的时候出现了一个警告错误。</p>\n</blockquote>\n<p><strong>screenshot</strong>\n<img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/eslint/eslint-warning.png\" alt=\"eslint\"></p>\n<h2>规范继承</h2>\n<p>定制一个规范要在<code class=\"language-text\">rule</code>中写很多的配置项，我们可以和一些一线互联网公司遵守相同的代码规范。只需要在配置文件中加入如下代码。下面代码使用了<code class=\"language-text\">Google</code>的代码规范。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\">\n      <pre class=\"language-json\"><code class=\"language-json\">//.eslintrc\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"eslint-config-google\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>当然还需要安装依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev eslint-config-google</code></pre>\n      </div>\n<h2>插件</h2>\n<p><a href=\"http://eslint.org/\">ESLint</a>提供插件配置，例如<code class=\"language-text\">react</code>、<code class=\"language-text\">babel</code>等。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\">\n      <pre class=\"language-json\"><code class=\"language-json\">//.eslintrc\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"babel\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>当然，也需要添加相应的依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\">\n      <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"eslint-plugin-babel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslint-plugin-react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.9.0\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h2>总结</h2>\n<p>一个团队的代码风格，以及代码规范是非常重要的。不仅仅能够让团队协作更加高效（别人能够读的懂你的代码），而且对于代码可维护性、辨识度、准确度有明显的提高。</p>","frontmatter":{"title":"ESLint 的使用","date":"February 27, 2017"}}},"pageContext":{"slug":"/2017-02-27-ESLint 的使用/","previous":{"fields":{"slug":"/2017-02-23-EJS在script标签中混合JavaScript代码的问题/"},"frontmatter":{"title":"EJS在script标签中混合JavaScript代码的问题"}},"next":{"fields":{"slug":"/2017-03-10-分享一些CSS画图技巧(1)——矩形/"},"frontmatter":{"title":"分享一些CSS画图技巧(1)——矩形"}}}}