{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"2867244c-0b20-5fde-b757-6b793212490b","html":"<h2>前提</h2>\n<p>在很多时候，前端程序员往往较早一步实现页面逻辑，后端程序员由于需要联调、掌握业务逻辑，消耗的时间比较长一点。那前端为了等后端程序员开发完成之后，<code class=\"language-text\">API</code>能够通过直接修改<code class=\"language-text\">URL</code>来对接，就需要伪造一些数据，但是，大部分情况而言，伪造的数据都是不变的。前端脚本不可能用来实现对数据的增删该查。但是，昨天意外发现一个工具——<a href=\"https://github.com/typicode/json-server\">json-server</a>,可以帮助前端程序员来解决页面逻辑控制的痛点。下面我通过一个简单的增删改查的例子来进行记录。</p>\n<!--more-->\n<h2>知识点</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/typicode/json-server\">json-server</a>的安装和使用</p>\n</li>\n<li>\n<p>POSTMAN的简单使用</p>\n</li>\n<li>\n<p><code class=\"language-text\">XMLHttpRequest</code>对象的用法</p>\n</li>\n<li>\n<p><code class=\"language-text\">http-server</code></p>\n</li>\n</ul>\n<hr>\n<h2>具体实现</h2>\n<h3><a href=\"https://github.com/typicode/json-server\">json-server</a>的安装</h3>\n<p>可以直接去<code class=\"language-text\">github</code>中查询其<code class=\"language-text\">API</code>。通过<code class=\"language-text\">npm</code>安装在全局中：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g json-server</code></pre>\n      </div>\n<h3><a href=\"https://github.com/typicode/json-server\">json-server</a>的启动</h3>\n<p>在启动之前，先来伪造一些数据。新建一个<code class=\"language-text\">json</code>文件，命名为<code class=\"language-text\">/db.json</code>,添加以下数据：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\">\n      <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"getArticle\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-1\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"beace2\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-2\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"beace3\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"postArticle\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-server\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typicode\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>在命令行中，键入:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ json-server /path/to/db.json</code></pre>\n      </div>\n<p>可以观察到，服务启动在了本地的<code class=\"language-text\">3000</code>端口，截图如下：</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/json-server/json-server-start.png\" alt=\"img\"></p>\n<p>我们可以访问<a href=\"http://localhost:3000/getArticle\">http://localhost:3000/getArticle</a>,来看到服务返回的<code class=\"language-text\">json</code>信息。(当然，可也以访问<a href=\"http://localhost:3000/postArticle\">http://localhost:3000/postArticle</a>，总之既定规则由你来决定)</p>\n<p><img src=\"http://images-manager.oss-cn-shanghai.aliyuncs.com/static/json-server/json-server-get.png\" alt=\"json-server-return\"></p>\n<h3>POSTMAN测试</h3>\n<p>其实，这样的功能并不能够证明其有多么遍历，我们随便伪造一个<code class=\"language-text\">json</code>文件也可以通过这样请求来获取数据，其实便利在于我们可以改变数据，而且是真实发生。</p>\n<p>可以通过POSTMAN来进行测试,效果如下诸多截图。</p>\n<p>获取数据</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/json-server/json-server-postman.png\" alt=\"img\"></p>\n<p>通过<code class=\"language-text\">id</code>获取数据</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/json-server/json-server-postman-delete.png\" alt=\"img\"></p>\n<p><code class=\"language-text\">POST</code>数据</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/json-server/json-server-postman-post.png\" alt=\"img\"></p>\n<p><code class=\"language-text\">DELETE</code>数据</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/json-server/json-server-postman-delete.png\" alt=\"img\"></p>\n<p>一系列操作之后 ，回到<code class=\"language-text\">/db.json</code>中会发现数据发生了改变。</p>\n<h3>XMLHttpRequest</h3>\n<p>通过一个简单的请求来获取数据并展示在网页上：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/getArticle'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//为了排版优美，省略了状态判断</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"language-text\">XMLHttpRequest</code>的使用必须通过<code class=\"language-text\">http</code>协议，在这里介绍一个轻量级的<code class=\"language-text\">web server</code>——<code class=\"language-text\">http-server</code>.</p>\n<p>通过npm全局安装：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g http-server</code></pre>\n      </div>\n<p>在项目根目录中运行：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ http-server</code></pre>\n      </div>\n<p>打开浏览器，进入<a href=\"http://localhost:8080\">http://localhost:8080</a>.</p>","frontmatter":{"title":"JSON-Server and XMLHttpRequest","date":"October 29, 2016"}}},"pageContext":{"slug":"/json-server-http-request/","previous":{"fields":{"slug":"/react-bad-way/"},"frontmatter":{"title":"react的缺点（一）：react中多个component的问题记录"}},"next":{"fields":{"slug":"/React-IndexRoute always-active/"},"frontmatter":{"title":"React IndexRoute always active"}}}}