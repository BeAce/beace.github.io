{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"68749fb2-2d07-5e1b-8d6a-b28df66ae241","html":"<h2>背景介绍</h2>\n<p>通常情况下，开发过程中日志会直接在控制台打印方便查看，生产环境下应该保存为文件，以便以后查阅。越来越大的项目规模会导致日志数据累计巨大，想要快速从文件中找到几乎是不可能的。因此，搭建日志系统，通过UI组织所有和查阅日志，通过表单查询和定位日志的方式显得尤为重要。下面所记录的就是有关这种类型的日志系统在NodeJS环境下的搭建和演示demo。这一篇仅仅记录过程。</p>\n<h2>前提</h2>\n<h3>什么是 ELK</h3>\n<blockquote>\n<p>“ELK” is the acronym for three open source projects: <code class=\"language-text\">Elasticsearch</code>, <code class=\"language-text\">Logstash</code>, and <code class=\"language-text\">Kibana</code>.</p>\n</blockquote>\n<p><code class=\"language-text\">ELK</code> 是三个开源项目的缩写，分别是：<code class=\"language-text\">Elasticsearch</code>, <code class=\"language-text\">Logstash</code>,<code class=\"language-text\">Kibana</code>。是集中式日志管理系统的解决方案。三个项目分别起了查询与存储、日志输入转化、日志输出的作用。</p>\n<p>开发人员代码中加入日志记录 -> <code class=\"language-text\">Logstas</code> 同时从多个源中提取数据，对其进行转换  -> 发送到 <code class=\"language-text\">Elasticsearch</code> -> <code class=\"language-text\">Kibana</code> 从  <code class=\"language-text\">Elasticsearch</code> 中查询数据进行可视化展示 &#x3C;- 开发人员查询日志</p>\n<h3>环境准备</h3>\n<ul>\n<li>Docker</li>\n<li>Node</li>\n</ul>\n<h2>开始</h2>\n<h3>通过Node TypeScript 搭建一个基础的服务</h3>\n<p>下面我们首先利用 TypeScript 和 Node 搭建一个基础的服务，这个服务会跑在本地的<code class=\"language-text\">3000</code>端口， 有一个基础的路由用来测试生成日志。项目地址 <a href=\"https://github.com/BeAce/elk-demo\">GitHub - BeAce/elk-demo: Node EKL demo</a></p>\n<p>首先，初始化项目</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> elk_demo <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cd</span> elk_demo\n<span class=\"token function\">npm</span> init -y\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> express --save\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/express log4js nodemon tslint typescript</code></pre></div>\n<p>由于使用了 TypeScript ，我们需要在项目根目录下新建两个 ts 的配置文件，<code class=\"language-text\">tsconfig.json</code>和 <code class=\"language-text\">tslint.json</code> 。这里直接参考了 <a href=\"https://github.com/Microsoft/TypeScript-Node-Starter\">GitHub - Microsoft/TypeScript-Node-Starter: A starter template for TypeScript and Node with a detailed README describing how to use the two together.</a></p>\n<p>// tsconfig.json</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/types/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>// tslint.json</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"class-name\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"comment-format\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"check-space\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"indent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"spaces\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"one-line\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"check-open-brace\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"check-whitespace\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-var-keyword\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"quotemark\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"double\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"avoid-escape\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"semicolon\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ignore-bound-class-methods\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"whitespace\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"check-branch\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"check-decl\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"check-operator\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"check-module\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"check-separator\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"check-type\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typedef-whitespace\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"call-signature\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nospace\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"index-signature\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nospace\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"parameter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nospace\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"property-declaration\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nospace\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"variable-declaration\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nospace\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"call-signature\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onespace\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"index-signature\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onespace\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"parameter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onespace\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"property-declaration\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onespace\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"variable-declaration\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onespace\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-internal-module\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-trailing-whitespace\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-null-keyword\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"prefer-const\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"jsdoc-format\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>新建<code class=\"language-text\">src/index.ts</code>，作为服务的入口文件</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> log4js <span class=\"token keyword\">from</span> <span class=\"token string\">\"log4js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> homeController <span class=\"token keyword\">from</span> <span class=\"token string\">\"./controllers/home\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> log4js<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> homeController<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"App is running at http://localhost:3000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Press CTRL-C to stop\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> server<span class=\"token punctuation\">;</span></code></pre></div>\n<p>新建 <code class=\"language-text\">src/controllers/home.ts</code> 用来处理 <code class=\"language-text\">/</code> 根路由的返回。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Request<span class=\"token punctuation\">,</span> Response <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">index</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">:</span> Request<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">:</span> Response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>Hello ELK&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这时候，我们的代码基本完成了。但是运行还需要将 TS 编译为 JS。为了方便以后开发，可以在 <code class=\"language-text\">package.json</code> 中增加以下的 <code class=\"language-text\">script</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nodemon dist/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build:watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run watch-ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build-ts &amp;&amp; npm run tslint\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build-ts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"watch-ts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc -w\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"tslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tslint -c tslint.json -p tsconfig.json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在一个 bash 窗口中运行 <code class=\"language-text\">npm run build:watch</code> 会在 <code class=\"language-text\">/dist</code> 目录下生成 JS 文件，另一个 bash 窗口中运行 <code class=\"language-text\">npm start</code> 会看到服务已经在 <code class=\"language-text\">3000</code>端口跑起来，并且可以看到服务启动时输出的日志。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> starting <span class=\"token variable\"><span class=\"token variable\">`</span>node dist/index.js<span class=\"token variable\">`</span></span>\n<span class=\"token punctuation\">[</span>2019-01-18T14:17:36.333<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>INFO<span class=\"token punctuation\">]</span> default - App is running at http://localhost:3000 <span class=\"token keyword\">in</span> development mode\n<span class=\"token punctuation\">[</span>2019-01-18T14:17:36.335<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>INFO<span class=\"token punctuation\">]</span> default - Press CTRL-C to stop</code></pre></div>\n<p>如果访问  <a href=\"http://localhost:3000\">http://localhost:3000</a> 可以看到 <code class=\"language-text\">hello elk</code> 说明第一步已经成功了。</p>\n<h3>搭建 ELK</h3>\n<p>由于我们采用了docker，所以可以通过docker的编排文件来一起将这三个服务跑起来。<a href=\"https://github.com/deviantony/docker-elk\">docker-elk</a> 这里提供了所需编排文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone https://github.com/deviantony/docker-elk.git\n$ docker-compose up <span class=\"token punctuation\">[</span>-d<span class=\"token punctuation\">]</span></code></pre></div>\n<p>成功执行后可以访问 <a href=\"http://localhost:5601\">http://localhost:5601</a> 可以 kibana 的 UI 界面。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/elk/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-01-18%20%E4%B8%8B%E5%8D%886.18.47.png\"></p>\n<p>默认的话，其他服务的端口如下:</p>\n<blockquote>\n<p>5000: Logstash TCP input.\n9200: Elasticsearch HTTP\n9300: Elasticsearch TCP transport\n5601: Kibana</p>\n</blockquote>\n<p>默认 Kibana 没有创建任何的 <code class=\"language-text\">pattern</code>,你可以通过UI界面或者通过命令行，这里我通过命令行来创建一个默认的。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -XPOST -D- <span class=\"token string\">'http://localhost:5601/api/saved_objects/index-pattern'</span> \\\n    -H <span class=\"token string\">'Content-Type: application/json'</span> \\\n    -H <span class=\"token string\">'kbn-version: 6.5.4'</span> \\\n    -d <span class=\"token string\">'{\"attributes\":{\"title\":\"logstash-*\",\"timeFieldName\":\"@timestamp\"}}'</span></code></pre></div>\n<p>到这里，ELK 平台就搭建完成了，接下来的任务，我们需要将刚刚 Node 应用中的控制台打印的日志，通过 tcp 的方式发送到 <code class=\"language-text\">Logstash</code> 来接收。默认的话是在 localhost 的 5000 端口。</p>\n<h3>记录日志</h3>\n<p>在 <code class=\"language-text\">src/index.ts</code> 文件中对 <code class=\"language-text\">log4js</code> 进行配置</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">log4js<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  appenders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"console\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// https://github.com/Aigent/log4js-logstash-tcp</span>\n    elk_learn<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"log4js-logstash-tcp\"</span><span class=\"token punctuation\">,</span>\n      host<span class=\"token punctuation\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n      port<span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  categories<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> appenders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"elk_learn\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">:</span> <span class=\"token string\">\"debug\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里需要 <code class=\"language-text\">npm install log4js-logstash-tcp --save-dev</code>。</p>\n<p>至此，我们就可以来记录日志了。在不断修改 Node 代码的过程当中，<code class=\"language-text\">nodemon</code> 会帮助我们重启服务，每次都会输出日志。现在，打开 <a href=\"http://localhost:5601%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%9C%8D%E5%8A%A1%E9%87%8D%E5%90%AF%E8%BE%93%E5%87%BA%E7%9A%84%E6%97%A5%E5%BF%97%E4%BA%86%E3%80%82%E5%9C%A8%E9%A1%B5%E9%9D%A2%E6%9C%80%E4%B8%8A%E6%96%B9%E7%9A%84%E6%90%9C%E7%B4%A2%E6%A1%86%E4%B8%AD%E8%BE%93%E5%85%A5\">http://localhost:5601，就可以看到服务重启输出的日志了。在页面最上方的搜索框中输入</a> <code class=\"language-text\">APP</code>,会查到所有包含 <code class=\"language-text\">APP</code> 的日志记录。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/elk/767CEE44-F570-4A9D-A5C4-858547D30187.png\"></p>\n<p>我们再来定义一个 json 的输出会是怎么样的呢</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{code: 0, data: 1000}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oh data error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>访问 <a href=\"http://localhost:3000/json%EF%BC%8C%E6%90%9C%E7%B4%A2%E5%90%8E%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E8%BE%93%E5%87%BA\">http://localhost:3000/json，搜索后看到如下输出</a></p>\n<p><img src=\"https://imgs.beacelee.com/2019/elk/7A7F0E8A-17D1-41B6-A291-8F97FEABA566.png\"></p>\n<h2>总结</h2>\n<p>这一次的记录主要包含了以下内容</p>\n<ul>\n<li>TypeScript Node Express 起一个简单的服务</li>\n<li>ELK 平台的搭建</li>\n<li>通过上面的服务记录和查询日志</li>\n</ul>\n<p>没试过的同学，赶快去试试吧~</p>","frontmatter":{"title":"NodeJS ELK 日志系统搭建入门","date":"January 18, 2019"}}},"pageContext":{"slug":"/2019/01-18/NodeJS ELK 日志系统搭建入门/","previous":{"fields":{"slug":"/2019/01-11/有关Windows平台下的自动更新方案/"},"frontmatter":{"title":"有关Electron 在 Windows平台下的自动更新方案"}},"next":null}}