{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"607ee853-d408-5c1f-8b9c-a58fff0ecf1a","html":"<blockquote>\n<p>翻译自：<a href=\"https://blog.usejournal.com/little-known-features-of-javascript-901665291387\">Little known features of JavaScript – Noteworthy - The Journal Blog</a></p>\n</blockquote>\n<p>JavaScript 经常被认为是一门最容易入门却最难精通的语言。我完全同意这样的说法。这是因为，JavaScript 是一个非常古老有很灵活的语言。它充满了神秘的功能和过时的语法。我已经使用 JavaScript 多年了，迄今为止，仍然是不是地偶然发现一些从未知道的隐藏语法或技巧。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/1.png\"></p>\n<p>我尝试将这些鲜为人知的特性列出来。尽管一些特性已经在严格模式下不可用了，但是他们仍然是非常合法的 JavaScript 代码。虽然它们非常酷，但是如果你使用它们，你很可能会对你的队友生气。</p>\n<p>所有的源代码都在<a href=\"https://gist.github.com/viral-sh/98813f83f4afe9dce5a74e176f88724f\">这里</a>。编码愉快！</p>\n<blockquote>\n<p>注意：不会包括这些知识：Hoisting, Closures, Proxies, Prototypal inheritance, async-await, generators 等。尽管这些特性可能很少人理解，但是他们还是很知名的。</p>\n</blockquote>\n<h2>Void 操作符</h2>\n<p>JavaScript 有一个一元操作符 <code class=\"language-text\">void</code>。你可能已经看到过<code class=\"language-text\">void(0)</code> 或者 <code class=\"language-text\">void 0</code> 类似的用法 。它的存在只有一个目的——评估它右侧的表达式然后返回 <code class=\"language-text\">undefined</code>。使用 「0」仅仅是一个转化。你没有必要使用「0」，它可以是任何像 <code class=\"language-text\">void &lt;expression&gt;</code> 的合法表达式，并且它任然返回 <code class=\"language-text\">undefined</code>。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-1.png\"></p>\n<blockquote>\n<p>为什么创造一个特殊的关键字来返回 <code class=\"language-text\">undefined</code> 而不是直接 <code class=\"language-text\">return undefined</code>?\n看起来有些冗余不是么？</p>\n<p>有趣的事实\n事实证明，在 ES5 之前，大多数的浏览器中，你可以为原始未定义的值分配一个新值，像这样 <code class=\"language-text\">undefined = &quot;abc&quot;</code>。\n因此，定义（defining）<strong>未定义(undefined)</strong>。（defining the undefined）\n在那段时间，使用 <code class=\"language-text\">void</code> 是一种可以保证你总是返回原始的 <code class=\"language-text\">undefined</code>的方式。</p>\n</blockquote>\n<h2>构造函数（constructor）的括号是可选的</h2>\n<p>是的，我们在调用构造函数时在雷鸣后面增加的括号——是完全可选的！😮 （前提是不需要给构造函数传递任何参数）。</p>\n<p>下面的两种编码的方式都是合法的 JS 语法，并且执行的结果一致。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-2.png\"></p>\n<h2>可以摆脱立即执行函数表达式（IIFE）的括号</h2>\n<p>IIFE(Immediately Invoked Functional Expression)  的语法对我来说总是有点奇怪。\n所有的括号都发生了什么？</p>\n<p>事实证明，这些额外的括号是用来告诉 JavaScript 解析器，即将执行的代码是一个函数表达式而不是一个函数。知道了这一点，可以想象，有很多方法来摆脱这些括号并且仍然保持一个合法的 IIFE。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-3.png\"></p>\n<p><code class=\"language-text\">void</code> 关键字告诉解析器这些代码是一个函数表达式（functional expression）。因此，我们可以摆脱 <code class=\"language-text\">function</code> 定义周围的括号。猜猜会发生什么？我们可以使用任何的一元表达式 <strong>（void，+，！，-，等等）</strong>，仍然会正常执行。</p>\n<p>这很酷！</p>\n<p>然而，如果你是一个敏锐的观察者，你可能会想：</p>\n<p><em>一元运算符不会影响IIFE返回的结果吗？</em></p>\n<p>是的，它会影响结果。但是好消息是，如果你担心结果并将其存储在某个变量中，那么不需要在第一个位置写额外的括号。</p>\n<p>这是真的！</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-4.png\"></p>\n<p>我们添加这些括号只是为了更好的可读性。</p>\n<p><em>想要更深入地了解IIFE，请查看<a href=\"https://medium.com/@vvkchandra\">Chandra Gundamaraju</a>的<a href=\"https://medium.com/@vvkchandra/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6\">这篇很酷的文章</a>。</em></p>\n<h2>With 语句</h2>\n<p>你知道 JavaScript 有一个 <code class=\"language-text\">with</code> 语句块吗？<code class=\"language-text\">with</code> 是 JS 的一个关键字。书写一个<code class=\"language-text\">with</code>块的语法像下面这样：</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-5.png\"></p>\n<p><code class=\"language-text\">with</code> 添加传递的「对象（object）」的所有属性，在作用域链中被用来作为取值语句。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-6.png\"></p>\n<blockquote>\n<p>🚩 有趣的事实\n<code class=\"language-text\">With</code> 块听起来非常酷，不是吗？它甚至比 对象解构（<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring\">object destructuring</a>）更好。\n好吧，并不是。\n通常并不推荐使用 <code class=\"language-text\">with</code> 语句，因为它被弃用了。它在严格模式下是被完全禁止的。因为<code class=\"language-text\">with</code> 块有着严重的性能和安全问题。</p>\n</blockquote>\n<h2>Function 构造器（The Function constructor）</h2>\n<p>函数（function）声明不是声明一个新的函数的唯一方法；还可以通过定义 <code class=\"language-text\">Function()</code> 构造器和一个 <code class=\"language-text\">new</code> 操作符。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-7.png\"></p>\n<p>构造器的最后一个参数是被字符串化的代码，在其之前的参数都是该函数的参数。</p>\n<blockquote>\n<p>🚩 有趣的事实\n在 JavaScript 中，<code class=\"language-text\">Function</code> 构造器是所有构造器之母。甚至 <code class=\"language-text\">Object</code> 的构造器也是一个 <code class=\"language-text\">Function</code> 构造器。并且，<code class=\"language-text\">Function</code>的自身构造器也是 <code class=\"language-text\">Function</code> 自己。因此，在 JavaScript 中，在任何 <code class=\"language-text\">object</code> 上调用 <code class=\"language-text\">object.constructor.constructor...</code> 多少次也会返回 <code class=\"language-text\">Function</code>的构造器。</p>\n</blockquote>\n<h2>函数属性（ Function Properties）</h2>\n<p>我们都知道函数是 JavaScript 中的第一类对象。因此，没有人能够阻止我们给函数增加属性。这是一个非常合法的 JavaScript 操作。但是，它很少被使用。</p>\n<p>因此，什么时候我们该用它？</p>\n<p>这里有很多使用它的案例。例如：</p>\n<h3>可配置的函数（Configurable Functions）</h3>\n<p>假设有一个 <code class=\"language-text\">greet</code> 函数。我们想要这个方法根据不同地域来打印不同的问候语。这个地域应该是可以配置的。我们可以维护一个 <code class=\"language-text\">local</code> 的全局变量或者使用如下所示的函数的属性来完成该功能</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-8.png\"></p>\n<h3>带有静态变量的函数</h3>\n<p>另外一个简单的例子。假设你想要实现一个可以生成有序队列数字的数字生成（Number Generator）函数，你将使用带有一个静态变量的<strong>Class</strong> 或者 <strong>IIFE</strong> 来跟踪最后一个值。这样我们就可以限制对计数器的访问，并避免使用额外的变量来污染全局空间。</p>\n<p>但是，如果我们希望灵活地读取甚至修改计数器并且不污染全球空间，那该怎么办呢？</p>\n<p>我们仍然应该创建一个 Class，带有一个计数器变量和一些读取它的额外方法；或者我们可以偷懒直接在函数上使用它的属性。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-9.png\"></p>\n<hr>\n<p>这是一个很长的清单，我们才到了一半。如果你想休息一下，现在是个好时机。如果不想，你是一个勇敢的战士，我向你致敬。</p>\n<p> 我们继续吧！</p>\n<h2>参数属性（Arguments Properties）</h2>\n<p>我相信大多数人都知道函数内的参数对象<code class=\"language-text\">arguments</code>。它是个在所有函数内都可以使用的类数组对象（array like object）。当函数被调用的时候，它有传递给函数的参数列表。但是它也有其他一些有趣的属性：</p>\n<ul>\n<li><strong>arguments.callee</strong> : 指的是当前调用的函数</li>\n<li><strong>arguments.callee.caller</strong>:  指的是已调用当前函数的函数</li>\n</ul>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-10.png\"></p>\n<blockquote>\n<p>提示：尽管在严格模式下 ES5 禁止使用 <code class=\"language-text\">calee</code> 和 <code class=\"language-text\">caller</code>，仍然可以在很多编译库中找到它的使用。因此，它值得我们学习。</p>\n</blockquote>\n<h2>标记性模板字符串（Tagged Template Literals）</h2>\n<p>除非你一直生活在岩石之下，不然你肯定听说过<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">模板字符串</a>。模板字符串是 ES6 新增的很多炫酷的特性之一。然而，你知道<strong>被标记的</strong>（Tagged）模板字符串么？</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-11.png\"></p>\n<p><em>标记性模板字符串</em> 允许你更好地控制将模板文字解析为字符串，通过在模板字符串中增加一个自定义的标记。标记（Tag）只是一个解析函数，它获取字符串模板解释的所有字符串和值的数组。标记函数返回最终的字符串。</p>\n<p>在下面的例子，有一个自定义的标记——<em>hightlight</em>，解释模板文字的值，并使用<mark>元素将结果字符串中的解释值包装起来以突出显示。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-12.png\"></p>\n<blockquote>\n<p>在很多库都有这些有趣的用例来利用这一功能。下面的这些很酷的例子，</p>\n<ul>\n<li><a href=\"https://github.com/styled-components/styled-components\">GitHub - styled-components/styled-components: Visual primitives for the component age. Use the best bits of ES6 and CSS to style your apps without stress 💅</a>for React</li>\n<li><a href=\"https://github.com/skolmer/es2015-i18n-tag\">es2015-i18n-tag</a> 用来翻译和国际化</li>\n<li><a href=\"https://github.com/chalk/chalk\">GitHub - chalk/chalk: 🖍 Terminal string styling done right</a> 用来美化日志</li>\n</ul>\n</blockquote>\n<h2>Getters &#x26; Setters</h2>\n<p>对于大部分来说，JavaScript 对象很简单。假设我们有一个 <code class=\"language-text\">user</code> 对象，尝试通过 <code class=\"language-text\">user.age</code> 获取它的属性 <code class=\"language-text\">age</code>，如果有定义将获取 <code class=\"language-text\">age</code> 的值，如果没有则会得到 <code class=\"language-text\">undefined</code>。就这么简单。</p>\n<p>但是，它不一定非常简单。JavaScript 对象有 <strong>Getters</strong> 和 <strong>Setters</strong> 的概念。除了直接返回对象上的值，还可以自定义 <strong>Getter</strong> 函数来返回我们想要的。同样也适用于设置一个值。</p>\n<p>这允许我们有很强大的概念在设置和获取一个字段的时候，像：<strong>虚拟字段</strong>（virtual fields），<strong>字段验证</strong>(field validations)，<strong>副作用</strong>(side-effects)。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-13.png\"></p>\n<p>Getters 和 Setters 不是 ES5 的新增内容；它们之前已经存在了。ES5只是为现有功能添加了方便的语法。可以通过<a href=\"https://www.hongkiat.com/blog/getters-setters-javascript/\">这篇文章</a>来学习关于 Getters 和 Setters 相关知识。</p>\n<blockquote>\n<p><a href=\"https://github.com/Marak/colors.js\">colors</a>，一个非常流行的 node.js 库，是一个利用 Getters 非常典型的例子。</p>\n<p>这个库<a href=\"https://github.com/Marak/colors.js/blob/master/lib/extendStringPrototype.js\">继承了 String 类</a> 并且增加了一系列的 Getter 方法。这允许我们通过简单地访问其上的属性，将任何字符串转换为其彩色的样式以便于日志记录。</p>\n</blockquote>\n<h2>逗号运算符（Comma operator）</h2>\n<p>JavaScript 有一个逗号运算符（common operator）。它允许我们在一行代码中书写多个用逗号分隔的表达式，并返回最后一个表达式的结果。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-14.png\"></p>\n<p>在这里，将评估所有表达式，并为 result 变量赋予 expressionN 返回的值。</p>\n<p>你可以能已经在一个循环中使用逗号运算符了。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-15.png\"></p>\n<p>它在一行中书写多个表达式的时候很有帮助。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-16.png\"></p>\n<p>或者写短的lamda函数</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-17.png\"></p>\n<h2>+ 加号运算符（+ Plus Operator）</h2>\n<p>想要快速地将一个 <code class=\"language-text\">string</code> 转化为 <code class=\"language-text\">number</code> 吗？</p>\n<p>仅仅需要给字符串加一个 <code class=\"language-text\">+</code> 的前缀。\n加号运算符也可以作用于 <em>负（negative），八进制（octal），十六进制（hexadecimal），指数（exponential）</em>类型的值。</p>\n<p>更重要的是，它甚至可以将Date或Moment.js对象转换为时间戳！</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-18.png\"></p>\n<h2>!! 运算符（!! Bang Bang Operator）</h2>\n<p>好吧，从技术上讲，它不是一个单独的JavaScript运算符。它仅仅是使用了两次的 JavaScript 的取反运算符。</p>\n<p>但是 <strong>!!</strong> 看起来太酷了！<strong>!!</strong>  是一个使代码整洁的技巧，可以将任意的表达式转化为 <em>Boolean</em> 值。</p>\n<p>如果表达式是一个<strong>真</strong>值，它返回 <em>true</em>；反之，返回 <em>false</em>。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-19.png\"></p>\n<h2>~ 波浪线操作符（~ Tilde Operator）</h2>\n<p>让我们来面对它——没有人关心位运算符（Bitwise operators）。\n我们什么时候才能使用它！</p>\n<p>好吧，<strong>~</strong> 或 位运算符有一个日常用例。</p>\n<p>我们可以通过将 <code class=\"language-text\">〜</code> 放在 <code class=\"language-text\">indexOf（…</code> 函数前面来进行布尔检查，一个项是否存在于 String 或 Array 中。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-20.png\"></p>\n<blockquote>\n<p>提示：ES6 和 ES6  在 String  和 Array 分别中增加了一个新的 <code class=\"language-text\">.includes()</code> 方法。很明显，检查一个数组或字符串中是否存在某个项目它比波浪线 <code class=\"language-text\">~</code> 更加地语义化。</p>\n</blockquote>\n<h2>标记语句（Labelled statements）</h2>\n<p>JavaScript 有标记语句的概念（Labelled statements）。它允许我们在 JavaScript 中定义循环和代码块。当使用 <code class=\"language-text\">break</code> 或 <code class=\"language-text\">continue</code> 时，我们使用标记来引用代码。</p>\n<p>标记语句在嵌套循环中特别方便。但我们也可以使用它们来简单地将代码组织成块或创建一个可跳出的块。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/little-know/code-21.png\"></p>\n<blockquote>\n<p>提示：不像其他的语言，JavaScript 并没有 <strong>goto</strong> 语句。因此，我们只能使用带有 <code class=\"language-text\">break</code> 和 <code class=\"language-text\">continue</code> 的标签。</p>\n</blockquote>\n<p><em>如果您对此类JavaScript怪癖有所了解，或者已经找到了有趣的用例来利用这些功能，请在下面分享您的经验。我很乐意听到它！</em></p>\n<p>我❤️ JavaScript 并喜欢写关于它的文章。但他们确实需要花费大量的时间和精力。如果您喜欢这篇文章，请分享并推荐它。</p>\n<p>Coding 愉快！</p>","frontmatter":{"title":"【译文】鲜为人知的JavaScript特性","date":"January 24, 2019"}}},"pageContext":{"slug":"/2019/01-24/鲜为人知的JavaScript特性/","previous":{"fields":{"slug":"/2019/01-18/NodeJS ELK 日志系统搭建入门/"},"frontmatter":{"title":"NodeJS ELK 日志系统搭建入门"}},"next":null}}