{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"9c1777e6-9adf-5e14-ad76-da1a9249e869","html":"<p>JavaScript 测试相关工具和库的对比和总结，以及自动化测试以及持续集成的的相关实践。</p>\n<h2>单元测试</h2>\n<h3>assert 断言</h3>\n<p><a href=\"https://nodejs.org/api/assert.html\">Assert | Node.js v11.0.0 Documentation</a>是 node.js 提供的断言测试的模块。该模块的方法较少，顾名思义，此模块更多是验证boolean是否成立。</p>\n<p>assert 又分为两种模式，strict 与 legacy，强烈推荐严格模式，一个是在写法上开启严格模式后不再需要增加额外的 <code class=\"language-text\">strict</code>,并且错误信息会有个 diff 的展示，更重要的是 <code class=\"language-text\">任何 assert 函数都会使用严格函数模式的等式</code>。通常一些优秀的 Node.js 开源项目都会再严格模式下执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseController</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>另外需要特别说明的是 assert 的 equal 用来比较实际与预期结果，当实际结果比较复杂，需要深入比较时，assert 提供了 deepStrictEqual 方法，具体比较了<code class=\"language-text\">对象的类型、对象的原型等等</code>。参考 <a href=\"https://nodejs.org/api/assert.html#assert_assert_deepstrictequal_actual_expected_message\">assert<em>assert</em>deepstrictequal<em>actual</em>expected_message</a></p>\n<h3>Should.js</h3>\n<p><a href=\"https://github.com/shouldjs/should.js\">GitHub - shouldjs/should.js: BDD style assertions for node.js — test framework agnostic</a> 作为 JavaScript 中的 <a href=\"https://zh.wikipedia.org/wiki/%E8%A1%8C%E4%B8%BA%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91\">行为驱动开发 - 维基百科，自由的百科全书</a> 测试工具。其用法相当语义化，在进行书写时像是在和自己的代码对话，这也是 BDD 的优势所在。</p>\n<p>should 相对于 assert 具有丰富的 API ，通过链式调用的方式，使得非开发人员可以参与。例如下面的代码</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 用户需要有pets属性，并且长度为4</span>\nuser<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pets'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">.</span><span class=\"token function\">lengthOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>should 还可以和其他模块相结合来使用，例如测试简单的 http 请求，结合immutableJS,jQuery 等。</p>\n<blockquote>\n<p>参考 <a href=\"https://github.com/shouldjs/should.js#additional-projects\">https://github.com/shouldjs/should.js#additional-projects</a>\nshould-sinon - adds additional assertions for sinon.js\nshould-immutable - extends different parts of should.js to make immutable.js first-class citizen in should.js\nshould-http - adds small assertions for assertion on http responses for node only\nshould-jq - assertions for jq (need maintainer)\nkarma-should - make more or less easy to work karma with should.js\nshould-spies - small and dirty simple zero dependencies spies</p>\n</blockquote>\n<h3>Chai.js</h3>\n<p>与 should 类似， <a href=\"https://www.chaijs.com/\">Chai</a> 声称是 BDD/TDD 的断言库，兼容node和浏览器平台，由一点重要的是 chai 具有丰富的插件，比如 chai-webdriver, 提供了浏览器端的测试方法，例如以下代码（参考<a href=\"https://www.chaijs.com/plugins/chai-webdriver/\">chai-webdriver - Chai</a>）</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Start with a webdriver instance:</span>\n<span class=\"token keyword\">var</span> sw <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'selenium-webdriver'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> driver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">sw<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">withCapabilities</span><span class=\"token punctuation\">(</span>sw<span class=\"token punctuation\">.</span>Capabilities<span class=\"token punctuation\">.</span><span class=\"token function\">chrome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// And then...</span>\n<span class=\"token keyword\">var</span> chai <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chai'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> chaiWebdriver <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chai-webdriver'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchai<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">chaiWebdriver</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// And you're good to go!</span>\ndriver<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://github.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchai<span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#site-container h1.heading'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span>contain<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm a kitty!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>通过引入 webdriver , chai 可以想 should 一样去操作和测试浏览器。</p>\n<h3>Expect.js,</h3>\n<p>基于 should，这里可以看他的Feature, <a href=\"https://github.com/Automattic/expect.js/#features\">GitHub - Automattic/expect.js: Minimalistic BDD-style assertions for Node.JS and the browser.</a></p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Cross-browser: works on IE6+, Firefox, Safari, Chrome, Opera.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Compatible with all test frameworks.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Node.JS ready (require(‘expect.js’)).</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Standalone. Single global with no prototype extensions or shims.</li>\n</ul>\n<h3>Mocha</h3>\n<p><a href=\"https://mochajs.org/\">Mocha - the fun, simple, flexible JavaScript test framework</a> 提供了线性的持续测试。提供了各种生命周期的钩子函数，甚至可以利用上一次的测试用例进行下次的使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hooks'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// runs before all tests in this block</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// runs after all tests in this block</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// runs before each test in this block</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// runs after each test in this block</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// test cases</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>mocha 惊艳到我的是可视化的自动测试以及详细的测试报告。</p>\n<p>mocha 可以将测试信息的信息再网页上显示，即使你测试的是nodejs程序，当你保存你的测试用例，mocha会自动进行测试并在网页上输出相应结果。</p>\n<p>另外，你可以借助 <a href=\"https://www.npmjs.com/package/nyc\">nyc  -  npm</a> 帮你生成测试报告</p>\n<div class=\"gatsby-highlight\" data-language=\"json\">\n      <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"script\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"cover\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nyc --reporter=text --reporter=html npm test\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这里是 text reporter</p>\n<p><img src=\"https://imgs.beacelee.com/2018/ci/1.png\" alt=\"text-reporter\"></p>\n<p><img src=\"https://imgs.beacelee.com/2018/ci/2.png\"></p>\n<p>这里是 file-repoter</p>\n<p><img src=\"https://imgs.beacelee.com/2018/ci/3.png\"></p>\n<p>打开 index.html 可以查看</p>\n<p><img src=\"https://imgs.beacelee.com/2018/ci/4.png\"></p>\n<p>点到具体的某个函数可以按照行来查看具体哪行没有被覆盖，来继续提高测试的覆盖率</p>\n<p><img src=\"https://imgs.beacelee.com/2018/ci/5.png\"></p>\n<h2>持续集成（CI）</h2>\n<h3>Code Quality</h3>\n<p><a href=\"https://app.codacy.com\">codacy</a> 是免费的代码质量工具，可以通过同步你的github代码，选择仓库之后通过相应的配置文件来检查你的代码是否规范，并且给出友好的提示。例如下面的代码没有声明 match 类型，codacy 提示了如下错误和改正方法。\n<img src=\"https://imgs.beacelee.com/2018/ci/6.png\"></p>\n<p>通过代码的质量工具可以更好的约束和规范自己的代码，在避免低级的错误之外培养良好的习惯，尤其是在其报错之后引发自己的思考，反复地琢磨更好的是实现方式，从而进一步提高自己的编码水平。</p>\n<h3>Travis</h3>\n<p>代码质量检测是第一步，还是相当低级的一个检测，只会检测语法、类型、风格等等。逻辑的部分就需要交给CI来跑测试代码了。</p>\n<p>Travis 是免费的 CI 工具，可以通过其自动构建你的项目，并跑测试最终release 产品。Travis提供了各种监控代码提交的方式 branch、tag等等，提交代码后自动构建，这也是CI 工具必备的技能。</p>\n<p>说到CI 工具，必须有平台 platform 在起基础的支撑。每次触发 CI 的时候，travis 默认会基于 linux来构建，目前支持 linux和macos，不支持windows，所以很多electron的项目想要构建windows都会借助另外一个工具 appveyor。</p>\n<p>Travis几乎是所有开源项目的必备了，其生命周期有以下几个概念。</p>\n<blockquote>\n<p>Jobs 可以说是一个最小的单元，负责克隆代码后的编译\nBuilds 多个版本的build\nStages 不同的阶段，例如开始之前你需要发个通知告诉自己CI开始了<code class=\"language-text\">start stage</code>,开始build <code class=\"language-text\">build stage</code>,build 结束之后再发一条通知<code class=\"language-text\">end build stage</code>,build出错了 <code class=\"language-text\">build notify stage</code>等等。</p>\n</blockquote>\n<p>在使用 CI 时，需要了解他的配置文件是如何书写的，travis 通过声明式的yaml文件,在书写时就像在配置一台电脑的环境，参考<a href=\"https://docs.travis-ci.com/user/languages/javascript-with-nodejs/\">Building a JavaScript and Node.js project - Travis CI</a></p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\">\n      <pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> node_js <span class=\"token comment\"># 你的语言node</span>\n<span class=\"token key atrule\">node_js</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> \"8\" <span class=\"token comment\"># 版本 8</span>\n<span class=\"token key atrule\">before_install</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">\"curl -L https://raw.githubusercontent.com/arunoda/travis-ci-laika/6a3a7afc21be99f1afedbd2856d060a02755de6d/configure.sh | /bin/sh\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> mongodb <span class=\"token comment\"># 你需要mongodb服务</span>\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> LAIKA_OPTIONS=\"<span class=\"token punctuation\">-</span>t 5000\"</code></pre>\n      </div>\n<h3>CircleCI</h3>\n<p><a href=\"https://circleci.com\">Continuous Integration and Delivery - CircleCI</a> 具有和Travis相同的功能，不过相对于 Travis 来说支持多语言比较少，而且不支持MacOS平台，不过构建速度很快，而且cache功能可以避免重复的 <code class=\"language-text\">npm install</code>。我最喜欢它的是对每个stage分的很清楚，不像travis只给一个最终结果，下面图片是我测试eggjs项目的stage。</p>\n<p><img src=\"https://imgs.beacelee.com/2018/ci/7.png\"></p>\n<h2>Gitlab</h2>\n<p>在这里只做个简单的附加餐。作为企业内部来讲，不可能把代码开源。因此需要寻找自主搭建的CI服务，因此 gitlab 可以作为一种选择。</p>\n<p>以下是我在github找到的 TDD JavaScript 开源项目 <a href=\"https://github.com/rmurphey/js-assessment\">GitHub - rmurphey/js-assessment: A test-driven approach to assessing JS skills</a>，我将答案填了上去，并且将其改成了node版本。<a href=\"https://git.beacelee.com/beace/js-assessment\">Beace / js-assessment · GitLab</a></p>\n<p>可以参考其CI以及相关构建过程 <a href=\"https://git.beacelee.com/beace/js-assessment/pipelines\">Pipelines · Beace / js-assessment · GitLab</a></p>\n<h2>总结</h2>\n<p>还有些其他的测试库有待更新，例如</p>\n<ul>\n<li><a href=\"https://karma-runner.github.io/3.0/index.html\">Karma</a></li>\n<li><a href=\"https://sinonjs.org/\">sinonjs</a>\n通过对JavaScript的各种测试工具的调研，分析了工具的优势，具体的使用方法还是在相应文档中浏览并且实践比较好。</li>\n</ul>\n<p>另外，对于CI的选择，CircleCI具有非常好的性能，并且构建速度非常快，但由于其平台和语言支持的不够多，所以比较适合小项目的构建。Travis 具有强大的功能以及平台支撑，可以用来构建大型的开源项目。gitlab用于企业私有的项目构建，而且gitlab需要gitlab-runner来作为支撑，需要有一定的运维经验。</p>","frontmatter":{"title":"关于CI 及测试有关知识工具总结","date":"November 01, 2018"}}},"pageContext":{"slug":"/ci-research/","previous":{"fields":{"slug":"/ant-pro-2-https/"},"frontmatter":{"title":"在AntPro 2.0中本地开发开启HTTPS"}},"next":null}}