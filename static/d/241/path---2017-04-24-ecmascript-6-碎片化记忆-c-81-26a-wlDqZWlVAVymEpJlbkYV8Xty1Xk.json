{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"1dca66c5-43cb-52ba-90ce-3a6e5a051938","html":"<h2>变量交换</h2>\n<p>交换<code class=\"language-text\">x</code>,<code class=\"language-text\">y</code>值</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x = 2, y = 1</span></code></pre>\n      </div>\n<!--more-->\n<h2>术语</h2>\n<ul>\n<li>模板字符串 （template string)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<ul>\n<li>扩展运算符 (…)</li>\n</ul>\n<h2>定义原生方法</h2>\n<p>例如：<code class=\"language-text\">Number</code>对象，具有<code class=\"language-text\">toString(),parseInt(),parseFloat()</code>等方法，如果我们想定义一个全局、或者模块化的方法该如何定义呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Object.defineProperty(Number, &#39;lager30&#39;, {value: function lager30(value) {\n  return typeof value === &#39;number&#39; &amp;&amp; value &gt; 30;\n}});\n// 此时Number对象具有了large30属性，可以像如下方式调用\nNumber.lager30(20); // false\nNumber.lager30(50); // true</code></pre>\n      </div>\n<h2>Math对象新增的方法</h2>\n<h4>Math.trunc()</h4>\n<ul>\n<li><code class=\"language-text\">用于获取Number</code>类型数据的整数部分，也可以进行<code class=\"language-text\">parseInt()</code>浮点数转整数的操作****</li>\n</ul>\n<p>兼容写法</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Math<span class=\"token punctuation\">.</span>trunc <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>trunc <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h4>Math.sign()</h4>\n<ul>\n<li>用于判断正负数和0</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+1</td>\n<td>表示正数</td>\n</tr>\n<tr>\n<td>-1</td>\n<td>表示负数</td>\n</tr>\n<tr>\n<td>0</td>\n<td>表示0</td>\n</tr>\n<tr>\n<td>-0</td>\n<td>表示-0</td>\n</tr>\n<tr>\n<td>NaN</td>\n<td>表示参数非Number类型或未传参</td>\n</tr>\n</tbody>\n</table>\n<p><em>技巧</em>：字符串转整数</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span></code></pre>\n      </div>\n<h2>运算符</h2>\n<h4>指数运算符</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">let a = 2 ** 3; // 8</code></pre>\n      </div>\n<blockquote>\n<p>注意，在 V8 引擎中，指数运算符与<code class=\"language-text\">Math.pow</code>的实现不相同，对于特别大的运算结果，两者会有细微的差异。</p>\n</blockquote>\n<h4>扩展运算符</h4>\n<p>所谓类似数组的对象，本质特征只有一点，即必须有<code class=\"language-text\">length</code>属性。因此，任何有<code class=\"language-text\">length</code>属性的对象，都可以通过<code class=\"language-text\">Array.from</code>方法转为数组，而此时扩展运算符就无法转换。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// || Array.from(arguments) || [].slice.call(arguments);</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/arguments/arguments.png\"></p>\n<h2>Array</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">Array.from(arrayLike[, callback])</code></p>\n<p>类数组的转化，同上例子。callback是一个迭代器，可以对得到的数组进行二次处理，下面获取了元素的二次方。</p>\n<p><em>注意</em>： <code class=\"language-text\">Array.from()</code>与扩展运算符（…）都会讲数组中的空位转为<code class=\"language-text\">undefined</code>。</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ES6</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span> item <span class=\"token operator\">=></span> item <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<ul>\n<li>\n<p>将字符串转化为数组</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['1','2','3','4','5','6'];</span></code></pre>\n      </div>\n</li>\n<li>\n<p><code class=\"language-text\">Array.fill()</code></p>\n<p>填充数组，覆盖掉原数组中的原值</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2]</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3, 3]</span></code></pre>\n      </div>\n<ul>\n<li>\n<p><code class=\"language-text\">Array.includes()</code></p>\n<p>检测数组中是否包含某个元素</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">[1,2,3].includes(1); // true\n//与indexOf的区别\n[NaN].includes(NaN) // true\n[NaN].indexOf(NaN)  // false</code></pre>\n      </div>\n<ul>\n<li><code class=\"language-text\">forEach()</code>, <code class=\"language-text\">filter()</code>, <code class=\"language-text\">every()</code> 和<code class=\"language-text\">some()</code>都会跳过空位。</li>\n<li><code class=\"language-text\">map()</code>会跳过空位，但会保留这个值</li>\n<li><code class=\"language-text\">join()</code>和<code class=\"language-text\">toString()</code>会将空位视为<code class=\"language-text\">undefined</code>，而<code class=\"language-text\">undefined</code>和<code class=\"language-text\">null</code>会被处理成空字符串。</li>\n<li><code class=\"language-text\">entries()</code>、<code class=\"language-text\">keys()</code>、<code class=\"language-text\">values()</code>、<code class=\"language-text\">find()</code>和<code class=\"language-text\">findIndex()</code>会将空位处理成<code class=\"language-text\">undefined</code>。</li>\n</ul>","frontmatter":{"title":"ECMASCRIPT6 -- 碎片化记忆","date":"August 24, 2017"}}},"pageContext":{"slug":"/2017-04-24-ECMASCRIPT6 -- 碎片化记忆/","previous":{"fields":{"slug":"/2017-04-18-HTML5 dataset 属性不为人知的地方（命名规则和原理）/"},"frontmatter":{"title":"HTML5 dataset 属性不为人知的地方（命名规则和原理）"}},"next":{"fields":{"slug":"/2017-09-19-写给弟弟，玄烨/"},"frontmatter":{"title":"写给弟弟，玄烨"}}}}