{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"dd9bba4e-0134-5411-8560-f4773482ec21","html":"<h2>目标</h2>\n<ul>\n<li>\n<p>接上一篇<a href=\"https://beacelee.com/post/router-static-page.html\">快学Scala+Playframework之增删改查——路由与静态页面（二）</a>,完成其他页面路由的配置</p>\n</li>\n<li>\n<p>后端<code class=\"language-text\">API</code>的书写 列表数据请求</p>\n</li>\n</ul>\n<h2>知识点</h2>\n<ul>\n<li>\n<p>路由配置</p>\n</li>\n<li>\n<p><code class=\"language-text\">playframework</code>第三方库的安装（<code class=\"language-text\">mysql</code>操作库）</p>\n</li>\n<li>\n<p>数据库操作</p>\n</li>\n<li>\n<p><code class=\"language-text\">API</code>请求 列表数据请求实现</p>\n</li>\n</ul>\n<!--more-->\n<hr>\n<h2>静态页面和<code class=\"language-text\">API</code>路由的配置</h2>\n<p>在<code class=\"language-text\">/conf/routes</code>文件中定义静态页面和<code class=\"language-text\">API</code>的路由。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">GET           <span class=\"token operator\">/</span>users                   controllers<span class=\"token punctuation\">.</span>UserController<span class=\"token punctuation\">.</span>list   <span class=\"token comment\">//列表</span>\nGET           <span class=\"token operator\">/</span>users<span class=\"token operator\">/</span>add               controllers<span class=\"token punctuation\">.</span>UserController<span class=\"token punctuation\">.</span>add  <span class=\"token comment\">//添加</span>\nGET           <span class=\"token operator\">/</span>users<span class=\"token operator\">/</span>detail<span class=\"token operator\">/</span><span class=\"token operator\">:</span>id        controllers<span class=\"token punctuation\">.</span>UserController<span class=\"token punctuation\">.</span>detail<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//详情</span>\nGET           <span class=\"token operator\">/</span>users<span class=\"token operator\">/</span><span class=\"token operator\">:</span>id               controllers<span class=\"token punctuation\">.</span>UserController<span class=\"token punctuation\">.</span>edit<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//修改</span>\nGET           <span class=\"token operator\">/</span>users<span class=\"token operator\">/</span><span class=\"token operator\">:</span>id<span class=\"token operator\">/</span>delete        controllers<span class=\"token punctuation\">.</span>UserController<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//删除</span>\n#API\nGET           <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>users               controllers<span class=\"token punctuation\">.</span>Application<span class=\"token punctuation\">.</span>list\nPOST          <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>users               controllers<span class=\"token punctuation\">.</span>Application<span class=\"token punctuation\">.</span>add\nGET           <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>users<span class=\"token operator\">/</span><span class=\"token operator\">:</span>id           controllers<span class=\"token punctuation\">.</span>Application<span class=\"token punctuation\">.</span>detail<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span>\nPOST          <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>users<span class=\"token operator\">/</span>search        controllers<span class=\"token punctuation\">.</span>Application<span class=\"token punctuation\">.</span>search\nPOST          <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>users<span class=\"token operator\">/</span><span class=\"token operator\">:</span>id           controllers<span class=\"token punctuation\">.</span>Application<span class=\"token punctuation\">.</span>edit<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span>\nDELETE        <span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>users<span class=\"token operator\">/</span><span class=\"token operator\">:</span>id           controllers<span class=\"token punctuation\">.</span>Application<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>数据库操作</h2>\n<h3>数据库、表的创建</h3>\n<p>数据库采用<code class=\"language-text\">mysql</code>,在OS X下，为了加快速度，我使用了<code class=\"language-text\">mysql</code>的可视化工具——<a href=\"https://www.sequelpro.com/\">Sequel Pro</a>进行数据库的创建，表的建立和数据的插入。</p>\n<p><code class=\"language-text\">Sequel Pro</code>是一款非常强大的数据库管理工具。支持标准的用户名密码登录、<code class=\"language-text\">SSH</code>登录、<code class=\"language-text\">Socket</code>登录。先在本地启动<code class=\"language-text\">mysql</code>服务。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ mysql.server start</code></pre></div>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/play-scala-userlist/mysql.png\" alt=\"命令行mysql\"></p>\n<p>启动<code class=\"language-text\">mysql</code>之后，需要通过<code class=\"language-text\">sequel pro</code>连接本地服务，通过如下图配置：</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/play-scala-userlist/sequel.png\" alt=\"sequel pro\"></p>\n<p>点击<code class=\"language-text\">connect</code>，建立如下所示表<code class=\"language-text\">test</code></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>test<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>password<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>description<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token operator\">=</span><span class=\"token number\">12</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以通过书写sql语句或者手动添加字段。并且插入一些数据如下：\n<img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/play-scala-userlist/sql.png\" alt=\"sql insert\"></p>\n<h3>配置、连接数据库</h3>\n<p>play中需要连接mysql需要在<code class=\"language-text\">build.sbt</code>中添加mysql驱动，并且这里我添加了mysql的操作函数库来高效率的查询数据库。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token string\">\"com.typesafe.play\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">%</span> <span class=\"token string\">\"anorm\"</span> <span class=\"token operator\">%</span> <span class=\"token string\">\"2.5.0\"</span>\n<span class=\"token string\">\"mysql\"</span> <span class=\"token operator\">%</span> <span class=\"token string\">\"mysql-connector-java\"</span> <span class=\"token operator\">%</span> <span class=\"token string\">\"5.1.36\"</span></code></pre></div>\n<p>接着需要在/conf/application.conf中配置数据库的名称、地址、密码等。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">db{\n  default.driver=com.mysql.jdbc.Driver\n  default.url=&quot;jdbc:mysql://localhost/play&quot;\n  default.username= root\n  default.password= &quot;&quot;\n}</code></pre></div>\n<p>接下来进行在/models中创建一个名为<code class=\"language-text\">UserInfo</code>的类：</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Userinfo <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>根据上述定义的路由，我们需要在Controllers中新建Application.scala作为后端API的控制器。</p>\n<blockquote>\n<p><strong>我们期望，返回一个json array的数据类型给前端接收，并且前端根据约定好的规则去获取并渲染.虽然在后面的处理中，又将<code class=\"language-text\">json</code>类型转化为了<code class=\"language-text\">Seq</code>，这是为了单纯搞明白play中的页面传值的写法。但是对于json格式的数据返回是必须掌握的，利于<code class=\"language-text\">AJAX</code>请求等进阶的学习。</strong></p>\n</blockquote>\n<h3>scala操作数据库</h3>\n<p>在play的高版本中，controller中的类，依赖注入。写法如下，这里可以参考play-anorm的API</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> Application <span class=\"token annotation punctuation\">@Inject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>db<span class=\"token operator\">:</span> Database<span class=\"token punctuation\">,</span>ws<span class=\"token operator\">:</span> WSClient<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Controller <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> list <span class=\"token operator\">=</span> Action <span class=\"token punctuation\">{</span> <span class=\"token keyword\">implicit</span> request <span class=\"token keyword\">=></span>\n    <span class=\"token keyword\">val</span> parser<span class=\"token operator\">:</span> RowParser<span class=\"token punctuation\">[</span>Userinfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Macro<span class=\"token punctuation\">.</span>namedParser<span class=\"token punctuation\">[</span>Userinfo<span class=\"token punctuation\">]</span>\n    db<span class=\"token punctuation\">.</span>withConnection <span class=\"token punctuation\">{</span> <span class=\"token keyword\">implicit</span> c <span class=\"token keyword\">=></span>\n      <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> SQL<span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>as<span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">)</span>\n      Ok<span class=\"token punctuation\">(</span>Json<span class=\"token punctuation\">.</span>toJson<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里，我们通过注入db来进行数据库的连接，查询数据库后获取result，并且返回了JSON格式的数据，这个时候可以刷新下页面，可以看到控制台报出这样的错误。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">No Json serializer found for type List[models.Userinfo]. Try to implement an implicit Writes or Format for this type.</code></pre></div>\n<p>可以看出数据库的连接没有出错，出错在于我们没有Userinfo这样JSON类型，需要隐式声明。解决办法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">  <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">val</span> userWrites <span class=\"token operator\">=</span> Writes<span class=\"token punctuation\">[</span>Userinfo<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Userinfo<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> description<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n      Json<span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"id\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> id<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"username\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> username<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"description\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> description<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"password\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> password\n      <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这里我创建了Userinfo类型下的序列化Json。可以通过postman来请求下我们事先定义好的url <a href=\"http://localhost:9000/api/users\">http://localhost:9000/api/users</a>，postman帮我们输出了请求到的数据，</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/play-scala-userlist/json.png\" alt=\"json\"></p>\n<blockquote>\n<p>整个过程大体是这样。postman请求服务器的/api/users路由，play接收到请求，去执行controller下的list方法，<code class=\"language-text\">list</code>方法通过查询数据库后，再将查询到的数据List类型处理为<code class=\"language-text\">json</code>，并返回给postman。</p>\n</blockquote>\n<p>那接收就比较容易了。</p>\n<blockquote>\n<p>同样，UserController中的list方法，<em>就是充当了postman</em>。不同于postman的是它比较”智能”，不是打印数据，而是将数据填充到html中，返回html文件，浏览器经过渲染，生成了html页面。</p>\n</blockquote>\n<h4>列表数据的获取</h4>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">//UserController中的list方法</span>\n<span class=\"token keyword\">class</span> UserController <span class=\"token annotation punctuation\">@Inject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ws<span class=\"token operator\">:</span> WSClient<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Controller <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> list <span class=\"token operator\">=</span> Action<span class=\"token punctuation\">.</span>async <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> s<span class=\"token string\">\"http://localhost:9001/api/users\"</span>\n    ws<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span>\n      response <span class=\"token keyword\">=></span>\n        <span class=\"token keyword\">val</span> json <span class=\"token operator\">=</span> Json<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> jsonSeq <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>as<span class=\"token punctuation\">[</span>Seq<span class=\"token punctuation\">[</span>Userinfo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        Ok<span class=\"token punctuation\">(</span>views<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">(</span><span class=\"token string\">\"User list\"</span><span class=\"token punctuation\">,</span> jsonSeq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我这里使用了play的<code class=\"language-text\">ws</code>方法，来请求一个url获取数据。细节内容可以参考play的<code class=\"language-text\">WSClient</code>内容。这里请求到json数据后，由于没有用到<code class=\"language-text\">AJAX</code>，所以还是转化成了<code class=\"language-text\">play</code>页面传值能够识别的<code class=\"language-text\">Seq</code>类型。</p>\n<p>可以看下<code class=\"language-text\">/views/users.scala.html</code>中的内容，就是遍历了所有的数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">@for(user <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>-</span> <span class=\"token attr-name\">users)</span> <span class=\"token attr-name\">{</span>\n    <span class=\"token attr-name\">&lt;tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>@user.id<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>@user.username<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>@user.description<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>@user.password<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@routes.UserController.detail(user.id)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>详情<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 10px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>|<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@routes.UserController.edit(user.id)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 10px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>|<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@routes.UserController.delete(user.id)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>删除<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n}</code></pre></div>\n<p>最终生成的html截图如下:</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/userlist.png\" alt=\"userlist\"></p>\n<h4>详情的获取</h4>\n<p>同样的详情（details）页面的API写法也非常简单了,除了sql语句不同，其他都类似。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">//Application.scala</span>\n<span class=\"token keyword\">def</span> detail<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> Action <span class=\"token punctuation\">{</span> <span class=\"token keyword\">implicit</span> request <span class=\"token keyword\">=></span>\n    <span class=\"token keyword\">val</span> parser<span class=\"token operator\">:</span> RowParser<span class=\"token punctuation\">[</span>Userinfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Macro<span class=\"token punctuation\">.</span>namedParser<span class=\"token punctuation\">[</span>Userinfo<span class=\"token punctuation\">]</span>\n    db<span class=\"token punctuation\">.</span>withConnection <span class=\"token punctuation\">{</span> <span class=\"token keyword\">implicit</span> c <span class=\"token keyword\">=></span>\n      <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> SQL<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"SELECT * FROM test WHERE id=$id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>as<span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">)</span>\n      Ok<span class=\"token punctuation\">(</span>Json<span class=\"token punctuation\">.</span>toJson<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>同样的前端请求并渲染数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">//UserController.scala</span>\n<span class=\"token keyword\">def</span> detail<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> Action<span class=\"token punctuation\">.</span>async <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> s<span class=\"token string\">\"http://localhost:9001/api/users/$id\"</span>\n    ws<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span>\n      response <span class=\"token keyword\">=></span>\n        <span class=\"token keyword\">val</span> json <span class=\"token operator\">=</span> Json<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> jsonSeq <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>as<span class=\"token punctuation\">[</span>Seq<span class=\"token punctuation\">[</span>Userinfo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        Ok<span class=\"token punctuation\">(</span>views<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">.</span>details<span class=\"token punctuation\">(</span><span class=\"token string\">\"user details\"</span><span class=\"token punctuation\">,</span>jsonSeq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>panel panel-default<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>panel-heading<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span>@d.username 的信息<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>panel-body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dl-horizontal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n             <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span>User name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span>\n             <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span>@d.username<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span>\n             <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span>Description<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span>\n             <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span>@d.description<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span>\n             <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span>Password<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span>\n             <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span>@d.password<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span>\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>截图如下:</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/userdetail.png\" alt=\"details\"></p>","frontmatter":{"title":"快学Scala+Playframework之增删改查—— 数据库操作（三）","date":"November 01, 2016"}}},"pageContext":{"slug":"/scala-palyframework-curd-3/","previous":{"fields":{"slug":"/javaScript-Not-defined-or-Undefined/"},"frontmatter":{"title":"JavaScript Not defined or Undefined"}},"next":{"fields":{"slug":"/scala-palyframework-curd-4/"},"frontmatter":{"title":"快学Scala+Playframework之增删改查—— 数据库操作（四）"}}}}