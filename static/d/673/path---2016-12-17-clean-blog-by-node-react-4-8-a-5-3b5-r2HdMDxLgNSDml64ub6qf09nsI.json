{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"f060bddd-0a58-5688-9675-3be5f8637d68","html":"<hr>\n<p>title: Clean Blog by Node &#x26;&#x26; React 4\ndate: Sat Dec 17 2016 16:22:23 GMT+0800 (CST)\nupdated: Sat Dec 17 2016 16:47:29 GMT+0800 (CST)\ncomments: 1\ncategories:\ntags: [[object Object],[object Object],[object Object],[object Object]]\npermalink: clean-blog-react-node-4</p>\n<hr>\n<h2>前言</h2>\n<ul>\n<li>此篇接上篇<a href=\"https://beacelee.com\">Clean Blog by Node &#x26;&#x26; React 3</a></li>\n<li>记录<a href=\"https://github.com/pandao/editor.md\">markdown.md</a>的使用</li>\n<li>记录<em>文章详情API</em>以及<em>提交文章API</em>的书写</li>\n</ul>\n<!--more-->\n<h2>开始实战</h2>\n<h3>markdown富文本编辑器的使用</h3>\n<p>之前一直在说<code class=\"language-text\">api</code>和<code class=\"language-text\">前后端路由</code>的书写方式，从来没有注重过前端某些样式。这里由于用到了<code class=\"language-text\">clean-blog</code>这个主题，所以在样式上没有太多修改。但是，有些功能该主题不支持的，比如富文本编辑器。为了找一个顺手的<code class=\"language-text\">markdown</code>富文本编辑器，我也是煞费苦心。在此记录下自己折腾后的总结。</p>\n<p><strong>首先来看下最终效果</strong></p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/node-react/node-react4/node-react4-1.png\" alt=\"Alt text\"></p>\n<h4>如何在项目中引用</h4>\n<ol>\n<li>通过<code class=\"language-text\">bower</code>下载该开源项目代码和依赖</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">bower <span class=\"token function\">install</span> --save editormd</code></pre>\n      </div>\n<ol start=\"2\">\n<li>在<code class=\"language-text\">/view/index.ejs</code>中引用其必要的<code class=\"language-text\">css、js</code>文件\n注意： 这里会依赖<code class=\"language-text\">jquery</code>和<code class=\"language-text\">bootstrap</code>的<code class=\"language-text\">css</code>，所以都需要作为前提引入</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/bower_components/editor.md/css/editormd.min.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/bower_components/editor.md/editormd.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<ol start=\"3\">\n<li>在页面添加一个有<code class=\"language-text\">id</code>的<code class=\"language-text\">div</code>元素，在这里我暂时起名为<code class=\"language-text\">myEditor</code>，在<code class=\"language-text\">/views/index.ejs</code>添加如下代码</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">var testEditor;\ntestEditor = editormd(&quot;myEditor&quot;, {\n\twidth   : &quot;100%&quot;,\n\theight  : 640,\n\temoji : true,\n\tpath    : &quot;../../bower_components/editor.md/lib/&quot;\n});</code></pre>\n      </div>\n<p>简单解释一下这段代码的用处。该段代码，在<code class=\"language-text\">id</code>为<code class=\"language-text\">myEditor</code>的<code class=\"language-text\">div</code>中插入了一个<code class=\"language-text\">className</code>为<code class=\"language-text\">testEditor</code>的<code class=\"language-text\">textarea</code>,</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">属性名</th>\n<th align=\"right\">含义</th>\n<th align=\"right\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">width</td>\n<td align=\"right\">textarea的宽度</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td align=\"right\">height</td>\n<td align=\"right\">textarea的高度</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td align=\"right\">emoji</td>\n<td align=\"right\">是否开启emoji表情</td>\n<td align=\"right\">开启后可以选择输入，但是不翻墙很难加载出来表情</td>\n</tr>\n<tr>\n<td align=\"right\">path</td>\n<td align=\"right\">依赖包所在路径</td>\n<td align=\"right\">由于该编辑器依赖requirejs，所以直接输入包的相对路径即可引用其他css/js文件</td>\n</tr>\n</tbody>\n</table>\n<p>这样做就已经万事俱备了吗？ 当然不可能！ </p>\n<p>如果我们不是单页应用，完全可以在添加博客页面增加这样的代码；但是恰恰我们是单页应用，虽然我们在<code class=\"language-text\">/views/index.ejs</code>都可以当做全局引入来作为依赖（其实我们更应该压缩为一个js文件），但是，由于该插件是动态插入<code class=\"language-text\">&lt;textarea&gt;&lt;/textarea&gt;</code>，当我们没有切到文章提交页面时，还没有加载改页面的<code class=\"language-text\">html</code>代码，插件找不到id为myEditor的div，所以会抛出myEditor为undefined的错误。那么，如何在文章提交页引入，成为了我们下一步要解决的问题。</p>\n<p>其实很简单，我们只需要在页面html加载完成是执行该方法即可。因此我们新建<code class=\"language-text\">/beComponents/TextArea</code>, 在<code class=\"language-text\">componentDidMount</code>方法中加入该段代码即可。如下代码所示。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> testEditor<span class=\"token punctuation\">;</span>\n\ttestEditor <span class=\"token operator\">=</span> <span class=\"token function\">editormd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myEditor\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\twidth   <span class=\"token punctuation\">:</span> <span class=\"token string\">\"100%\"</span><span class=\"token punctuation\">,</span>\n\t\theight  <span class=\"token punctuation\">:</span> <span class=\"token number\">640</span><span class=\"token punctuation\">,</span>\n\t\temoji <span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\tpath    <span class=\"token punctuation\">:</span> <span class=\"token string\">\"../../bower_components/editor.md/lib/\"</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"form-group\"</span><span class=\"token operator\">></span>\n\t\t\t<span class=\"token operator\">&lt;</span>label htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span><span class=\"token operator\">></span>内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n\t\t\t<span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"myEditor\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h3>后端文章提交API书写</h3>\n<p>静态页面设置完成后，可以在里面书写一些内容。例如下图所示。</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/node-react/node-react4/node-react4-2.png\" alt=\"Alt text\"></p>\n<p><em>如何执行提交操作，并且插入数据库呢？</em></p>\n<p>从先前的例子中都可以看到，我所设计的文档都是通过<code class=\"language-text\">Fetch API</code>去接受<code class=\"language-text\">JSON</code>数据，同样，我也会以<code class=\"language-text\">JSON</code>的形式提交数据。</p>\n<p>根据上一篇文章，提交文章的代码如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/post'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">var</span> db <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'article'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdb<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">var</span> Article <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'articles'</span><span class=\"token punctuation\">,</span> articleSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">var</span> article <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tarticle<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\tcode <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\tmsg<span class=\"token punctuation\">:</span> <span class=\"token string\">\"success\"</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>这里，我通过<code class=\"language-text\">req.body</code>来接收提交的数据，并且，当数据返回时，返回给客户端这样的<code class=\"language-text\">JSON</code>字符串.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\">\n      <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\tcode<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\tmessage<span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h3>前端文章提交代码的书写</h3>\n<p>首先要获取数据，并且对数据进行初步校验，即客户端校验。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">submitHandler</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\tmodel <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">;</span>\n\tmodel<span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.editormd-markdown-textarea'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">||</span> model<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t            <span class=\"token keyword\">case</span> <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">:</span>\n\t                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"作者未填写\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t            <span class=\"token keyword\">case</span> <span class=\"token string\">\"abstract\"</span><span class=\"token punctuation\">:</span>\n\t                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"摘要未填写\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t            <span class=\"token keyword\">case</span> <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span>\n\t                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"标题未填写\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t            <span class=\"token keyword\">case</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">:</span>\n\t                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"内容未填写\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t                <span class=\"token comment\">// nothing</span>\n\t        <span class=\"token punctuation\">}</span>\n\t        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>校验完成之后，提交数据。依然通过<code class=\"language-text\">Fetch API</code>提交<code class=\"language-text\">JSON</code>数据.提交成功后，弹出确认框，给予提示。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/api/post'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n         method<span class=\"token punctuation\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n         headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/json\"</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#myModal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">modal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.editormd-markdown-textarea'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             _this<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                 model<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                     author<span class=\"token punctuation\">:</span> <span class=\"token string\">\"beace\"</span><span class=\"token punctuation\">,</span>\n                     abstract<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n                     title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n                     content<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n                 <span class=\"token punctuation\">}</span>\n             <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops! You are not authorized.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error submitting form!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h3>文章详情API书写</h3>\n<p>当完成提交文章的操作之后，数据库中多了一行记录，如何访问该记录呢？这不得不到了了解文章详情的地步。</p>\n<p>我们在第三次记录的时候就已经将后端路由书写完成，大概是这样的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/post/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>但是，没有定义具体的实现方法，其实，和列表大同小异，只不过，列表中返回的是对象数组的格式(<code class=\"language-text\">find()</code>方法)；在这里，只需要返回一个对象（<code class=\"language-text\">findOne()</code>方法）。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/post/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> postId <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">var</span> db <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'article'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   db<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">var</span> Article <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'articles'</span><span class=\"token punctuation\">,</span> articleSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       Article<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n           _id<span class=\"token punctuation\">:</span> postId\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>              \n               res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>这样，本篇文章所记录的东西就完成了。</p>\n<h2>总结</h2>\n<p>本篇文章记录了<a href=\"https://github.com/pandao/editor.md\">开源markdown编辑器</a>的使用，以及其使用方式。并且，将提交文章和文章详情的后端接口书写完成。下一篇，将着重介绍后端如何处理<code class=\"language-text\">markdown</code>格式的字符串，并且介绍一下<code class=\"language-text\">react</code>中是如何直接输出<code class=\"language-text\">html</code>的。</p>","frontmatter":{"title":"","date":null}}},"pageContext":{"slug":"/2016-12-17-Clean Blog by Node && React 4/","previous":{"fields":{"slug":"/2016-12-21-Clean Blog by Node && React 5/"},"frontmatter":{"title":""}},"next":{"fields":{"slug":"/2016-12-16-Clean Blog by Node && React 3/"},"frontmatter":{"title":""}}}}