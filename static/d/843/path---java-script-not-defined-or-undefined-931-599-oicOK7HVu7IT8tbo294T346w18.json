{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"8d310c23-c8f2-5415-8e2f-7d6863b5377b","html":"<blockquote>\n<p>何为浏览器报错，何为程序报错？</p>\n</blockquote>\n<p>浏览器报错往往会阻止之后程序运行，比如，浏览器在出现问题后报错该页面其他依赖于该程序的都不会正常执行，程序往往会阻塞在报错的那一处；\n程序报错如果对上下文不产生依赖，往往可以继续执行，不影响其他代码运行。</p>\n<!--more-->\n<h3>举例</h3>\n<p>定义一个变量<code class=\"language-text\">a</code>,不进行初始化，对<code class=\"language-text\">a</code>进行下一步操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a:\"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>控制台没有报错，只是输出了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">a<span class=\"token punctuation\">:</span>undefined</code></pre>\n      </div>\n<p>如果<code class=\"language-text\">a</code>,没有进行定义，直接输出：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>浏览器会抛出这样的异常：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">Uncaught ReferenceError<span class=\"token punctuation\">:</span> a is not <span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>…<span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>这里的<code class=\"language-text\">not defined</code>和<code class=\"language-text\">undefined</code>可不是同样的意思。</p>\n<blockquote>\n<p><code class=\"language-text\">not defined</code>是没有找到变量，是内存中没有定义，也没有为<code class=\"language-text\">a</code>变量开辟区间,编译器找不到<code class=\"language-text\">a</code>引用，所以报错</p>\n</blockquote>\n<blockquote>\n<p><code class=\"language-text\">undefined</code>是<code class=\"language-text\">a</code>已经定义，存在这样的一个引用，只不过该变量的值为<code class=\"language-text\">undefined</code></p>\n</blockquote>\n<p>我们经常有这样的写法来判断<code class=\"language-text\">a</code>中的值来对数据进行处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">a <span class=\"token operator\">?</span> a <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></code></pre>\n      </div>\n<p>这样的三元运算符在<code class=\"language-text\">javascript</code>数据处理中非常常见，尤其是在<code class=\"language-text\">react</code>这种数据需要预定义的库中，更有很大的应用。</p>\n<h3>复杂的数据结构</h3>\n<p>其实在实际项目中，数据结构是非常复杂的，常常包含着数据的嵌套，往往需要处理一个<code class=\"language-text\">object</code>类型的数据。例如需要提交这样数据结构的表单数据：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\">\n      <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    model<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token operator\">:</span> <span class=\"token string\">\"javascript object\"</span><span class=\"token punctuation\">,</span>\n        content<span class=\"token operator\">:</span> <span class=\"token string\">\"object content\"</span><span class=\"token punctuation\">,</span>\n        author<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Dan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jerry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        ...\n        time<span class=\"token operator\">:</span> <span class=\"token null\">null</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>进行数据提交的时候还好，因为初始值都为空，不需要对一些表单进行赋值。如果是对于修改操作呢？好像直接赋予值就好了。但是这里存在着一点点的基础数据处理的操作，往往基础不牢靠的人会犯这样的错误。例如下面一段代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    model<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>title <span class=\"token operator\">?</span> model<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        content<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>content <span class=\"token operator\">?</span> model<span class=\"token punctuation\">.</span>content <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        author<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>author <span class=\"token operator\">?</span> model<span class=\"token punctuation\">.</span>author <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        ···\n        time<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>time <span class=\"token operator\">?</span> model<span class=\"token punctuation\">.</span>time <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这是<code class=\"language-text\">React</code>进入一个修改页面时，传入<code class=\"language-text\">input</code>中的值。这样的数据结构和判断，好像看起来没有什么问题。也用了三元运算符去解决数据没有定义的问题。但是<code class=\"language-text\">model</code>呢，假如一开始<code class=\"language-text\">model</code>就没有定义，直接去判断<code class=\"language-text\">model.title</code>,是否就复现了浏览器报错这一问题？答案是肯定的。</p>\n<blockquote>\n<p>当数据比较复杂，层级嵌套比较多，需要一层一层去判断，上述这样的情况，只会满足<code class=\"language-text\">model</code>已经定义并且是<code class=\"language-text\">object</code>类型，再去获取其属性，如果<code class=\"language-text\">model</code>还未定义或者不是<code class=\"language-text\">object</code>类型，直接获取，浏览器当然会报出找不到该<code class=\"language-text\">model</code>的错误。</p>\n</blockquote>\n<p>例如下面代码<code class=\"language-text\">model</code>不为<code class=\"language-text\">object</code>类型的错误示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> model<span class=\"token punctuation\">;</span>\nmodel<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">\"I am a property of model!\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Uncaught TypeError: Cannot set property 'a' of undefined(…)</span></code></pre>\n      </div>\n<p><em>那用什么方式可以避免呢？</em></p>\n<p>别着急，再看另一种做法。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    model<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> model <span class=\"token operator\">&amp;&amp;</span> model<span class=\"token punctuation\">.</span>title <span class=\"token operator\">?</span> model<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        content<span class=\"token punctuation\">:</span> model <span class=\"token operator\">&amp;&amp;</span> model<span class=\"token punctuation\">.</span>content <span class=\"token operator\">?</span> model<span class=\"token punctuation\">.</span>content <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        author<span class=\"token punctuation\">:</span> model <span class=\"token operator\">&amp;&amp;</span> model<span class=\"token punctuation\">.</span>author <span class=\"token operator\">?</span> model<span class=\"token punctuation\">.</span>author <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        ···\n        time<span class=\"token punctuation\">:</span> model <span class=\"token operator\">&amp;&amp;</span> model<span class=\"token punctuation\">.</span>time <span class=\"token operator\">?</span> model<span class=\"token punctuation\">.</span>time <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这样的做法是合理的。但不是最佳的，为了代码简洁，我们可以这样写。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>model <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    model<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>title <span class=\"token operator\">?</span> model<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        content<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>content <span class=\"token operator\">?</span> model<span class=\"token punctuation\">.</span>content <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        author<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>author <span class=\"token operator\">?</span> model<span class=\"token punctuation\">.</span>author <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        ···\n        time<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>time <span class=\"token operator\">?</span> model<span class=\"token punctuation\">.</span>time <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><strong>我们假设<code class=\"language-text\">model</code>是一定存在的这样的做法(因为<code class=\"language-text\">model</code>是父组件传递到子组件中-<code class=\"language-text\">react</code>的数据传递方式)</strong>。提供了一个简单的判断，这里检查了<code class=\"language-text\">model</code>中是否有值，如果为<code class=\"language-text\">undefined</code>或者<code class=\"language-text\">null</code>则赋予其<code class=\"language-text\">{}</code>，然后再为其添加属性。</p>\n<blockquote>\n<p>这里我们保证了<code class=\"language-text\">model</code>无论如何是一个<code class=\"language-text\">object</code></p>\n</blockquote>\n<p><strong>这里很容易发现，如果我们没有定义一个变量<code class=\"language-text\">a</code>，直接使用，就会出现not defind的错误，如果model是一个对象，里面没有a这个属性，我们model.a却不会报错。</strong></p>\n<p><em>这是为什么呢？</em></p>\n<p>我猜想，这是<code class=\"language-text\">javascript</code> <code class=\"language-text\">object</code>类型的特性。<code class=\"language-text\">javascript</code>中可以动态添加并且设置属性，例如我们想生成上述数据结构，直接定义就可以，想要重置某个属性的值，直接书写</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">model<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token string\">\"a has been rewrited\"</span></code></pre>\n      </div>\n<blockquote>\n<p><strong>去请求<code class=\"language-text\">model.a</code>是否有值，其实是同时定义了<code class=\"language-text\">model.a</code>这个属性，只是其没有被赋值而已。</strong></p>\n</blockquote>\n<blockquote>\n<p>所以，在复杂数据处理中，非常需要注意<code class=\"language-text\">not defined</code>和<code class=\"language-text\">undefined</code>的错误原理，才能够写出容错率更强的代码。</p>\n</blockquote>","frontmatter":{"title":"JavaScript Not defined or Undefined","date":"October 31, 2016"}}},"pageContext":{"slug":"/javaScript-Not-defined-or-Undefined/","previous":{"fields":{"slug":"/json-server-http-request/"},"frontmatter":{"title":"JSON-Server and XMLHttpRequest"}},"next":{"fields":{"slug":"/scala-palyframework-curd-3/"},"frontmatter":{"title":"快学Scala+Playframework之增删改查—— 数据库操作（三）"}}}}