{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"cd9a3b8e-686e-5f16-965c-96f467db18b0","html":"<h2>前言</h2>\n<ul>\n<li>此篇接上篇<a href=\"https://beacelee.com/post/clean-blog-react-node-4.html\">Clean Blog by Node &#x26;&#x26; React 4</a></li>\n<li>服务端 <code class=\"language-text\">markdown2html</code></li>\n<li><code class=\"language-text\">react</code>中解析<code class=\"language-text\">html</code>字符串，浏览器渲染</li>\n</ul>\n<!--more-->\n<h2>过渡</h2>\n<p>在<a href=\"https://beacelee.com/post/clean-blog-react-node-4.html#toc-5ce\">上篇</a>已经完成了文章详情接口的书写，但是，由于我们提交带服务器，服务器保存到数据库中的字符串是<code class=\"language-text\">markdown</code>格式的，浏览器不认识，因此，在<code class=\"language-text\">res.send(doc)</code>之前，需要把<code class=\"language-text\">doc</code>中保存的字符串解析为<code class=\"language-text\">html</code>格式，暴露给前端。下面，着重记录这个过程。</p>\n<h2>开始实战</h2>\n<h3>markdown库的选择</h3>\n<p><a href=\"https://github.com\">https://github.com</a> 上有许多可供选择的库。下面列出两个解析内容比较正确的库。</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/markdown\">markdown</a></li>\n<li><a href=\"https://github.com/chjj/marked\">marked</a></li>\n</ul>\n<p>我个人比较喜欢<code class=\"language-text\">marked</code>这个库，相对比较准确一点。下面我将着重记录<code class=\"language-text\">marked</code>这个库的使用。两者的安装方式都是一个套路。如果需要代码高亮显示，还需要安装<code class=\"language-text\">highlight.js</code>，并且引入其<a href=\"https://highlightjs.org/\">css</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">npm install highlight.js\nnpm install markdown\nnpm install marked</code></pre>\n      </div>\n<h3>marked</h3>\n<p>来到详情接口的文件中<code class=\"language-text\">/routes/index.js</code>.添加依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> marked <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> highlightjs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'highlight.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>在查询到数据库数据之后返回数据之前，使用<code class=\"language-text\">marked()</code>方法，将<code class=\"language-text\">markdown</code>的字符串解析成<code class=\"language-text\">html</code>字符串。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    marked<span class=\"token punctuation\">.</span><span class=\"token function\">setOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      renderer<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">marked<span class=\"token punctuation\">.</span>Renderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      gfm<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      tables<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      breaks<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      pedantic<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      sanitize<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      smartLists<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      smartypants<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      highlight<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> highlightjs<span class=\"token punctuation\">.</span><span class=\"token function\">highlightAuto</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    doc<span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> <span class=\"token function\">marked</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>这里的<code class=\"language-text\">setOption</code>，是最基本的配置（默认配置），其中，<code class=\"language-text\">highlight</code>属性是一个回调函数，主要作用就是代码高亮。</p>\n<p>在这里，我使用的主题为<code class=\"language-text\">tomorrow</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/styles/tomorrow.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>效果如下（背景图片仿照的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">mozilla</a>）</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/node-react/node-react5/node-react5-1.png\" alt=\"code preivew\"></p>\n<h3>markdown</h3>\n<p>使用markdown的话，可以只需要一行代码就可以实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">doc<span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> markdown<span class=\"token punctuation\">.</span><span class=\"token function\">toHTML</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>但是他的解析不是很准确，生成的标签样式也很难控制，所以决定弃用它。</p>\n<h3>react中html字符串</h3>\n<p>现在我们获取到了解析后的<code class=\"language-text\">html</code>字符串，但是不可以在<code class=\"language-text\">react</code>的<code class=\"language-text\">component</code>中直接输出，如果直接在<code class=\"language-text\">component</code>中当做一个变量去使用，就会发现你的<code class=\"language-text\">tag</code>都没有被浏览器解析，当做普通的字符串去处理了。<code class=\"language-text\">react</code>不支持这个是<a href=\"https://facebook.github.io/react/docs/dom-elements.html#dangerouslysetinnerhtml\">有一定道理的</a>，包括<code class=\"language-text\">angular</code>中类似拼接<code class=\"language-text\">html</code>的方式也会得到警告。</p>\n<blockquote>\n<p>一般来说，从脚本拼接<code class=\"language-text\">HTML</code>是有风险的，因为很容易无意中受到<a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">cross-site scripting (XSS)</a>攻击。</p>\n</blockquote>\n<p>但是作为一个静态博客而言，没有用户信息，一般也不会有这方面的影响，因此我们使用<code class=\"language-text\">dangerouslySetInnerHTML</code>这个属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>\n    model<span class=\"token punctuation\">.</span>content <span class=\"token operator\">?</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">dangerouslySetInnerHTML</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>__html<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Loading</span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>这样浏览器就可以正常解析<code class=\"language-text\">HTML</code>代码了。</p>\n<h3>Loading</h3>\n<p>可以看到，上面我使用了一个<code class=\"language-text\">&lt;Loading/&gt;</code>组件，该组件为数据还未请求到时显示。用法很简单，每次在输出内容是检查该内容是否为空（即是否请求到），如果没有，则显示改组件，否则显示内容。效果如下。</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/static/node-react/node-react5/node-react5-2.png\"></p>\n<p>我这里在三元表达式中判断完成后，返回组件的时，并没有使用<code class=\"language-text\">return</code>。这是因为在<code class=\"language-text\">react</code>中，组件——其实是一种表达式的存在。可以观察<code class=\"language-text\">babel</code>转义后的代码，<code class=\"language-text\">react</code>调用了<code class=\"language-text\">createElement</code>这个方法去生成它的虚拟DOM。</p>\n<p>如果直接看<code class=\"language-text\">babel</code>简单来演示转义后的代码就可以很明白的看到这个原理。这里我在babel/repl中简单演示下。</p>\n<h4>表达式 ？== 组件  （原理演示）</h4>\n<p>浏览器打开 <a href=\"https://babeljs.io/repl%EF%BC%8C%E5%BB%BA%E7%AB%8B%E4%B8%A4%E4%B8%AA%60components%60\">https://babeljs.io/repl，建立两个<code class=\"language-text\">components</code></a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Loading</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        a <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"data ready\"</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Loading<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>假设以变量<code class=\"language-text\">a</code>为数据请求的标志</p>\n<ul>\n<li><code class=\"language-text\">a &gt; 0</code>表示数据请求完成，显示内容</li>\n<li><code class=\"language-text\">a &lt; 0</code> 表示数据还未请求到，显示<code class=\"language-text\">Loading</code></li>\n</ul>\n<p>这时，看右边实时转义后的代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">...\nvar App = function (_Component2) {\n  _inherits(App, _Component2);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: &quot;render&quot;,\n    value: function render() {\n      var a = -1;\n      return a &gt; 0 ? &quot;data ready&quot; : _react2.default.createElement(Loading, null);\n    }\n  }]);\n\n  return App;\n}(_react.Component);\n...</code></pre>\n      </div>\n<p>这是<code class=\"language-text\">App Component</code>中的内容，注意这几行代码</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\"> _createClass(App, [{\n    key: &quot;render&quot;,\n    value: function render() {\n      var a = -1;\n      return a &gt; 0 ? &quot;data ready&quot; : _react2.default.createElement(Loading, null);\n    }\n  }]);</code></pre>\n      </div>\n<p><code class=\"language-text\">react</code>在引入<code class=\"language-text\">&lt;Loading/&gt;</code>组件时，创建了一个叫<code class=\"language-text\">loading</code>的元素。这样就可以理解，为什么不需要<code class=\"language-text\">return</code>一串<code class=\"language-text\">html</code>。</p>\n<h2>总结</h2>\n<p>以上内容，包括前4次的记录，总计5篇内容，已经将项目的所有基础内容涵盖。目前已经在 <a href=\"https://beace.tech\">https://beace.tech</a> 上发布。</p>\n<ul>\n<li><a href=\"https://beacelee.com/post/node-react-1.html\">Clean Blog by Node &#x26;&#x26; React 1</a></li>\n<li><a href=\"https://beacelee.com/post/clean-blog-react-node-2.html\">Clean Blog by Node &#x26;&#x26; React 2</a></li>\n<li><a href=\"https://beacelee.com/post/clean-blog-react-node-3.html\">Clean Blog by Node &#x26;&#x26; React 3</a></li>\n<li><a href=\"https://beacelee.com/post/clean-blog-react-node-4.html\">Clean Blog by Node &#x26;&#x26; React 4</a></li>\n<li><a href=\"https://beacelee.com/post/clean-blog-react-node-5.html\">Clean Blog by Node &#x26;&#x26; React 5</a></li>\n</ul>\n<p><strong>有以下几个关键知识点</strong></p>\n<ul>\n<li><code class=\"language-text\">node/expressjs</code> 后端项目结构的构建</li>\n<li><code class=\"language-text\">react/webpack</code> 前端项目结构的构建</li>\n<li>上述两者结合的项目整体架构</li>\n<li><code class=\"language-text\">expressjs + mongodb</code>的增、删、改、查（其实获取详情也是一种查的基础体现）的实现</li>\n<li><code class=\"language-text\">expressjs</code>增、删、改、查API 的书写</li>\n<li>\n<p><code class=\"language-text\">markdown</code>的使用</p>\n<ul>\n<li>编辑器的使用</li>\n<li><code class=\"language-text\">markdown to html</code></li>\n<li><code class=\"language-text\">react/browser string to html</code></li>\n</ul>\n</li>\n<li>\n<p>以及一些细节</p>\n<ul>\n<li><code class=\"language-text\">loading</code>的实现</li>\n<li>部分原理的讲解</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Clean Blog by Node && React 5","date":"Invalid date"}}},"pageContext":{"slug":"/clean-blog-by-react-and-nodejs-5/","previous":{"fields":{"slug":"/clean-blog-by-react-and-nodejs-2/"},"frontmatter":{"title":"Clean Blog by Node && React 2"}},"next":{"fields":{"slug":"/2017-02-22-JavaScript-Math.random()/"},"frontmatter":{"title":"JavaScript-Math.random()"}}}}