{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-01-18-解析webpack plugin的生命周期，书写自己的第一个plugin/","webpackCompilationHash":"1e3e2b3aceaf2ae073fa","result":{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"370dee50-eafb-57f8-acda-e18fb0f1f2c0","html":"<h2>引子</h2>\n<p>想要了解webpack plugin如何编写，首先要了解其应用场景和作用。</p>\n<p>可以先浏览这三篇文章</p>\n<blockquote>\n<p><a href=\"https://github.com/webpack/docs/wiki/how-to-write-a-plugin\">how-to-write-a-plugin</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://webpack.js.org/api/compiler/\">compiler API</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/webpack/docs/wiki/plugins\">plugins API</a></p>\n</blockquote>\n<p>除此之外，在这里我和<code class=\"language-text\">webpack loader</code>进行了简单的对比。</p>\n<!--more-->\n<h3>plugin &#x26; loader</h3>\n<h4>plugin</h4>\n<p>顾名思义，webpack plugin是作为webpack的一个插件机制存在，将webpack提供的处理方法暴露给第三方（开发者）来开发。在整个项目架构中，往往起宏观上的作用。例如<code class=\"language-text\">HtmlWebpackPlugin</code>，修改一些文件，inject一些用户的资源，这些资源往往是经过loader处理过的资源，比如<code class=\"language-text\">jsx</code>文件，<code class=\"language-text\">css</code>文件。</p>\n<h4>loader</h4>\n<p>而loader用于对开发者源代码的转换，功能而言，跟webpack本身并没有强耦合的关系。例如，强大的babel-loader可以使用浏览器暂不支持的<code class=\"language-text\">JavaScript</code>语法（糖），<code class=\"language-text\">css-loader</code>和<code class=\"language-text\">styles-loader</code>用来处理你的<code class=\"language-text\">css</code>。</p>\n<p>总之，Loader的这些工作不需要开发者去干涉，只需相应配置全权交个loader去处理。而plugin往往需要用户先预备好已经有的资源，再去对资源进行宏观上的操作，并不会在内容细节上处理。</p>\n<h2>场景的明确</h2>\n<p>我们需要明确一些plugin场景来进行实际开发的模拟。比如，抽离公共模块（CommonsChunkPlugin），控制模块的输出方式，或者输出内容（这里可能体现比较直观的是UglifyJsPlugin），复制一些为经过webpack处理的静态文件（copyWebpackPlugin）。</p>\n<h2>Compiler and Compilation</h2>\n<p>在了解生命周期之前，必须要了解<code class=\"language-text\">Compiler and Compilation</code>两个概念，我通常会翻译成<code class=\"language-text\">编译器</code>和<code class=\"language-text\">编译集合</code>。</p>\n<h4>Compiler(编译器)</h4>\n<p>翻译为<code class=\"language-text\">编译器</code>，是因为往往编译器在开发者的眼中是整个源代码所处的编译环境（预设环境），是一个静态场景。webpack通过Compiler提供了webpack配置内容的所有配置项和插件相关的调用函数，在这里，你可以随意获得你想要的某个配置，并且根据相应的配置书写相应的plugin代码逻辑。下面展示了compiler中用到的一些生命周期和有关webpack配置的代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">_plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'before-run'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\noptions<span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">{</span> entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./index.js'</span><span class=\"token punctuation\">,</span>\n     output<span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/Users/beace/Documents/beace/github/webpack/custom-plugins/first-plugin'</span><span class=\"token punctuation\">,</span>\n        filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n        chunkFilename<span class=\"token punctuation\">:</span> <span class=\"token string\">'[id].bundle.js'</span><span class=\"token punctuation\">,</span>\n        library<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        hotUpdateFunction<span class=\"token punctuation\">:</span> <span class=\"token string\">'webpackHotUpdate'</span><span class=\"token punctuation\">,</span>\n        jsonpFunction<span class=\"token punctuation\">:</span> <span class=\"token string\">'webpackJsonp'</span><span class=\"token punctuation\">,</span>\n        libraryTarget<span class=\"token punctuation\">:</span> <span class=\"token string\">'var'</span><span class=\"token punctuation\">,</span>\n        sourceMapFilename<span class=\"token punctuation\">:</span> <span class=\"token string\">'[file].map[query]'</span><span class=\"token punctuation\">,</span>\n        hotUpdateChunkFilename<span class=\"token punctuation\">:</span> <span class=\"token string\">'[id].[hash].hot-update.js'</span><span class=\"token punctuation\">,</span>\n        hotUpdateMainFilename<span class=\"token punctuation\">:</span> <span class=\"token string\">'[hash].hot-update.json'</span><span class=\"token punctuation\">,</span>\n        crossOriginLoading<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        chunkLoadTimeout<span class=\"token punctuation\">:</span> <span class=\"token number\">120000</span><span class=\"token punctuation\">,</span>\n        hashFunction<span class=\"token punctuation\">:</span> <span class=\"token string\">'md5'</span><span class=\"token punctuation\">,</span>\n        hashDigest<span class=\"token punctuation\">:</span> <span class=\"token string\">'hex'</span><span class=\"token punctuation\">,</span>\n        hashDigestLength<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n        devtoolLineToLine<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        strictModuleExceptionHandling<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> HelloWorldPlugin <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> MyPlugin <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n     context<span class=\"token punctuation\">:</span> <span class=\"token string\">'/Users/beace/Documents/beace/github/webpack/custom-plugins/first-plugin'</span><span class=\"token punctuation\">,</span>\n     devtool<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n     cache<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n     target<span class=\"token punctuation\">:</span> <span class=\"token string\">'web'</span><span class=\"token punctuation\">,</span>\n     module<span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">{</span> unknownContextRequest<span class=\"token punctuation\">:</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span>\n        unknownContextRegExp<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        unknownContextRecursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        unknownContextCritical<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        exprContextRequest<span class=\"token punctuation\">:</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span>\n        exprContextRegExp<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        exprContextRecursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        exprContextCritical<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        wrappedContextRegExp<span class=\"token punctuation\">:</span> <span class=\"token regex\">/.*/</span><span class=\"token punctuation\">,</span>\n        wrappedContextRecursive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        wrappedContextCritical<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        strictExportPresence<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        strictThisContextOnImports<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        unsafeCache<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     node<span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        process<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        global<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        Buffer<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        setImmediate<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        __filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'mock'</span><span class=\"token punctuation\">,</span>\n        __dirname<span class=\"token punctuation\">:</span> <span class=\"token string\">'mock'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     performance<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> maxAssetSize<span class=\"token punctuation\">:</span> <span class=\"token number\">250000</span><span class=\"token punctuation\">,</span> maxEntrypointSize<span class=\"token punctuation\">:</span> <span class=\"token number\">250000</span><span class=\"token punctuation\">,</span> hints<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     resolve<span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">{</span> unsafeCache<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        mainFiles<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        aliasFields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        mainFields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        cacheWithContext<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     resolveLoader<span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">{</span> unsafeCache<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        mainFields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        mainFiles<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        cacheWithContext<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  context<span class=\"token punctuation\">:</span> <span class=\"token string\">'/Users/beace/Documents/beace/github/webpack/custom-plugins/first-plugin'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Compilation(编译集合)</h4>\n<p>Compilation虽然继承自Compiler，但是对于本身作用来讲，因为他包含了chunks，modules，cache，assets，是动态的资源集合。动态的原因是，在某个编译阶段，产生的编译资源是不相同的。</p>\n<blockquote>\n<p>编译会显示有关模块资源，编译资源，更改的文件以及监视的依赖项当前状态的信息。编译还提供了许多插件可以选择执行自定义操作的回调点。</p>\n</blockquote>\n<p>每一个版本执行的编辑逻辑（开发者），决定了上述特点。下面选取了部分关于chunks和assets中的内容</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">chunks<span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">[</span> Chunk <span class=\"token punctuation\">{</span>\n       id<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n       ids<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       debugId<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n       name<span class=\"token punctuation\">:</span> <span class=\"token string\">'main'</span><span class=\"token punctuation\">,</span>\n       _modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>SortableSet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       entrypoints<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       chunks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       parents<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       blocks<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       origins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       files<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       rendered<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n       entryModule<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>NormalModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       hash<span class=\"token punctuation\">:</span> <span class=\"token string\">'bfe5f97a4642c50a5286f6a28486186a'</span><span class=\"token punctuation\">,</span>\n       renderedHash<span class=\"token punctuation\">:</span> <span class=\"token string\">'bfe5f97a4642c50a5286'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">{</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">:</span>\n   CachedSource <span class=\"token punctuation\">{</span>\n     _source<span class=\"token punctuation\">:</span> ConcatSource <span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Array<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     _cachedSource<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n     _cachedSize<span class=\"token punctuation\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n     _cachedMaps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     node<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n     listMap<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>生命周期</h2>\n<h4>简历一个简单的项目</h4>\n<p>通过以下简单的配置，我将一个<code class=\"language-text\">index.js</code>简单的进行webpack打包，输出<code class=\"language-text\">bundle.js</code>。并在根目录下创建<code class=\"language-text\">my-plugin.js</code>文件，作为即将开发的插件。代码如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> MyPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./my-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./index.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> options<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>根据webpack的要求，插件必须要在其原型上创建apply对象。</p>\n<blockquote>\n<p>因为当webpack命令执行时，插件将被创建，而webpack将通过调用apply来安装插件，并将引用传递给webpack编译对象。</p>\n</blockquote>\n<p>反观表现，通过创建apply对象以及apply的参数，可以调用webpack底层的方法。在my-plugin.js中写入</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyPlugin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">MyPlugin</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">apply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h4>从执行顺序看生命周期</h4>\n<p>如果非常粗暴的将plugin的几个关键的生命周期输出出来，执行顺序是将会是这样的</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\t<span class=\"token comment\">// 1</span>\n  compiler<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"compile\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The compile is starting to compile...\"</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 2</span>\n  compiler<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"compilation\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The compile is starting a new compilation...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4</span>\n    compilation<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"optimize\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The compilation is starting to optimize file...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 3</span>\n  compiler<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"make\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the compile is making file...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 5</span>\n  compiler<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after-compile\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The compile has aleardy compiled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 6</span>\n\tcompiler<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"emit\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The compilation is going to emit files...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 7</span>\n\tcompiler<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after-emit'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The compliation has aleardy emitted'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>代码的注释，代表了执行的顺序，可以看下命令行中的输出</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/2018/webpack/webpack-1.png\" alt=\"webpack\"></p>\n<p>从上述代码的执行顺序来看，plugin的生命周期如下：</p>\n<ol>\n<li><code class=\"language-text\">Compile</code> 开始进入编译环境，开始编译</li>\n<li><code class=\"language-text\">Compilation</code> 即将产生第一个版本</li>\n<li><code class=\"language-text\">make</code>任务开始</li>\n<li><code class=\"language-text\">optimize</code>作为<code class=\"language-text\">Compilation</code>的回调方法，优化编译，在<code class=\"language-text\">Compilation</code>回调函数中可以为每一个新的编译绑定回调。</li>\n<li><code class=\"language-text\">after-compile</code>编译完成</li>\n<li><code class=\"language-text\">emit</code>准备生成文件，开始释放生成的资源，<strong>最后一次添加资源到资源集合的机会</strong></li>\n<li><code class=\"language-text\">after-emit</code>文件生成之后，编译器释放资源</li>\n</ol>\n<h4>从源码中看生命周期</h4>\n<p>咦，好像漏了两条，当编译完成时，可以看到命令行里面并没有文件的输出，回去查看项目中的代码，也并没有<code class=\"language-text\">bundle.js</code>文件。6、7步到底执行了么？</p>\n<p>答案当然是没有执行。因为没有看到资源释放的结果。</p>\n<p>让我们在源码中一探究竟。找到Compile所在的源码。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCompilationParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">applyPluginsAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before-compile\"</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 1</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">applyPlugins</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"compile\"</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 2</span>\n\t\t\t<span class=\"token keyword\">const</span> compilation <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCompilation</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 3</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">applyPluginsParallel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"make\"</span><span class=\"token punctuation\">,</span> compilation<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\tcompilation<span class=\"token punctuation\">.</span><span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">// 4</span>\n\t\t\t\tcompilation<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token comment\">// 5</span>\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">applyPluginsAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after-compile\"</span><span class=\"token punctuation\">,</span> compilation<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> compilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>很明显，当编译完成时，webpack Seal 资源完毕后直接将callback return，所以当我们在调用<code class=\"language-text\">after-compile</code>没有进行任何处理，阻止了接下来的return。将my-plugin.js中的代码注释掉<code class=\"language-text\">after-compile</code>这一步骤或者添加新的参数callback并执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// my-plugin.js</span>\ncompiler<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after-compile\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The compile has aleardy compiled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这时再运行webpack，命令行中可以看到输出了<code class=\"language-text\">The compilation is going to emit files</code>,并且输出了<code class=\"language-text\">bundle.js</code>。</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/2018/webpack/webpack-2.png\" alt=\"webpack\"></p>\n<h2>编写自己的插件</h2>\n<p>上面截图可以看到，Hash上面的一行输出<code class=\"language-text\">All compilers have done.</code>,其实这也是在webpack plugin的生命周期的范围，<code class=\"language-text\">done</code>是所有工作结束后，会执行的最后一个步骤。并且，当webpack plugin watch到某个过程出错的时候，也会执行<code class=\"language-text\">done</code>。如以下源代码，可以看到每次执行错误之后，都会走<code class=\"language-text\">done</code>\t流程。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPluginsAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"watch-run\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onCompiled</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> compilation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invalid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPluginsBailResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should-emit\"</span><span class=\"token punctuation\">,</span> compilation<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> compilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span><span class=\"token function\">emitAssets</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invalid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span><span class=\"token function\">emitRecords</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">.</span><span class=\"token function\">applyPluginsBailResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"need-additional-pass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\tcompilation<span class=\"token punctuation\">.</span>needAdditionalPass <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t\t<span class=\"token keyword\">const</span> stats <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stats</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\tstats<span class=\"token punctuation\">.</span>startTime <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>startTime<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\tstats<span class=\"token punctuation\">.</span>endTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPlugins</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">,</span> stats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPluginsAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"additional-pass\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>onCompiled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> compilation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compiler<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>onCompiled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>因此，为了简单而言，我们此次编写的插件也是基于<code class=\"language-text\">done</code>来进行。</p>\n<h4>编写plugin</h4>\n<p>接下来将要编写一个在生成bundle.js文件之后，在第一行添加时间注释，在最后一行添加自己姓名注释，并重新输出<code class=\"language-text\">bundle.js</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">compiler<span class=\"token punctuation\">.</span><span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"done\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stats</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'All compilers have done.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> fileData <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>encoding<span class=\"token punctuation\">:</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fileData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">'/*2018*/'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> author <span class=\"token operator\">=</span> <span class=\"token string\">'/* ——By Beace Lee */'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> finalFileData <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileData<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>author<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>\n      path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      finalFileData\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>通过以上代码可以看出，在<code class=\"language-text\">done</code>这个步骤中，通过读取<code class=\"language-text\">emit</code>的<code class=\"language-text\">bundle.js</code>文件（因为这个时候资源已经释放，可以直接使用资源），<strong>以utf-8的格式读取</strong>，读取完毕后在整个字符串的前后添加两行注释并换行，再写到最终文件里。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// bundle.js</span>\n<span class=\"token comment\">/*2018*/</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">/* 0 */</span>\n<span class=\"token comment\">/***/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is a entry js file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">/***/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/* ——By Beace Lee */</span></code></pre></div>\n<h2>总结</h2>\n<p>此种方式，其实是调用了node的fs的API去实现，看起来除了生命周期之外，并没有和webpack plugin有什么太大关系，我们其实是操作了文件，当有大量文件存在的时候，该插件显得捉襟见肘。</p>\n<p>除此之外，前面说过可以操作compiler的assets集合， 暂时写到这里，下回再聊。</p>","frontmatter":{"title":"解析webpack plugin的生命周期，书写自己的第一个plugin","date":"January 18, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-01-18-解析webpack plugin的生命周期，书写自己的第一个plugin/","previous":{"fields":{"slug":"/2018-01-01-消失与重现/"},"frontmatter":{"title":"消失与重现"}},"next":{"fields":{"slug":"/2018-02-08-webpack 处理 css module的一种方式/"},"frontmatter":{"title":"webpack 处理 css module的一种方式"}}}}}