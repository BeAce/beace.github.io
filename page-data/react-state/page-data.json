{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-state/","webpackCompilationHash":"a7e2b21b509852c48099","result":{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"4e30b9af-be6d-536c-b644-fefd01811467","html":"<h3>问题描述</h3>\n<p>假设，有这样两个<code class=\"language-text\">jsx</code>文件</p>\n<ul>\n<li><code class=\"language-text\">form.jsx</code>（具体描述的表单文件，包含具体的<code class=\"language-text\">html</code>代码：<code class=\"language-text\">input</code>和<code class=\"language-text\">button</code>等，一下称为子文件）</li>\n<li><code class=\"language-text\">page.jsx</code>（引用上一个文件，可简单称为上一个<code class=\"language-text\">component</code>的父亲，包含需要执行事件的具体逻辑，以下称为父文件）</li>\n</ul>\n<p>父文件通过这样的代码来引用子文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form</span></span> <span class=\"token attr-name\">companyList</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>companyList<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>并且通过<code class=\"language-text\">ref</code>的属性来获取子文件中填写的数据，然后进行提交。事件则通过<code class=\"language-text\">props</code>传递到子文件的<code class=\"language-text\">button</code>上。</p>\n<!--more-->\n<p>假设提交之前，需要对某些数据进行一些处理，比如<code class=\"language-text\">%</code>需要进行除以<code class=\"language-text\">100</code>的操作，在函数<code class=\"language-text\">submitHandler()</code>中添加了如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//model为用户填写的数据</span>\nmodel<span class=\"token punctuation\">.</span>rate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>rate <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>提交之后，某个字段在数据库中已经存在并且不能重复，此时，后端抛出异常，在前端捕获到后提示用户，该字段输入错误。此时，页面没有进行任何的<code class=\"language-text\">500</code>错误跳转，当再次修改此字段，触发该输入框的<code class=\"language-text\">onChange</code>事件时，发现输入框中<code class=\"language-text\">rate</code>却发生了变化，自动执行上述代码，而第二次改动并没有执行<code class=\"language-text\">submitHandler()</code>。</p>\n<p><strong>用简单的语言描述就是：</strong></p>\n<p>当我想在<code class=\"language-text\">input</code>中填写的数据跟提交的真实数据不相同时，会产生上述问题。</p>\n<h3>问题原因</h3>\n<p>主要是触发<code class=\"language-text\">submitHandler()</code>方法，此时的state已经被重置为计算后的值，由于页面还没有<code class=\"language-text\">re-render</code>，所以看不到直观的变化。当<code class=\"language-text\">onChange</code>触发后，<code class=\"language-text\">state</code>又一次更新，触发<code class=\"language-text\">render</code>，使得<code class=\"language-text\">UI update</code>。</p>\n<p><strong>所以出现了改变当前字段而其他字段发生变化的假象！</strong></p>\n<blockquote>\n<p>可以从这里找到<a href=\"https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#what-should-go-in-state\">react的建议</a>。<code class=\"language-text\">state</code>中应该保持最原始的数据记录，不应该包含太多复杂的逻辑，如果需要对<code class=\"language-text\">state</code>二次加工，大可放到<code class=\"language-text\">render()</code>中进行。而这个建议好像不太符合问题的描述，但该建议至少可以提醒我们应该在合适的地方对<code class=\"language-text\">state</code>进行<code class=\"language-text\">simple computed</code>。</p>\n</blockquote>\n<h3>解决办法</h3>\n<p>既然不能显式的改变<code class=\"language-text\">state</code>，那么利用原始数据处理后再覆盖掉原始数据的做法，进行提交操作就变得不可行。</p>\n<p>因此，可以可以定义一个变量来存储改变后的值，而不是直接用<code class=\"language-text\">state</code>，通过<code class=\"language-text\">lodash</code>中的<code class=\"language-text\">_.assigin()</code>方法，可以对数据进行整合和覆盖，此方法是<code class=\"language-text\">ES6</code>中<code class=\"language-text\">Object.assigin</code>的一个扩展，写法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">_<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>参数含义：</p>\n</blockquote>\n<ul>\n<li><code class=\"language-text\">object (Object)</code>: The destination object.</li>\n<li><code class=\"language-text\">[sources] (...Object)</code>: The source objects.</li>\n</ul>\n<blockquote>\n<p>返回值：</p>\n</blockquote>\n<blockquote>\n<p><code class=\"language-text\">(Object)</code>: Returns object.</p>\n</blockquote>\n<p><strong>具体代码</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> data<span class=\"token punctuation\">;</span>\ndata <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        rate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>rate <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>该方法为从右向左的计算方式，如果<code class=\"language-text\">model</code>中含有<code class=\"language-text\">rate</code>,则将<code class=\"language-text\">model.rate</code>覆盖，如果不含有则添加<code class=\"language-text\">rate</code>属性，以此类推。</p>\n<h3>总结</h3>\n<blockquote>\n<p>上述情况，数据处理时，通过定义变量保存<code class=\"language-text\">state</code>中的数据，可以有效避免<code class=\"language-text\">state</code>因为其他事件触发而导致<code class=\"language-text\">UI</code>显示的问题。比起粗暴地将<code class=\"language-text\">state</code>直接覆盖，更加地严谨。</p>\n</blockquote>","frontmatter":{"title":"react中state变化导致的问题","date":"October 10, 2016"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-state/","previous":{"fields":{"slug":"/bundle-install-command-not-found/"},"frontmatter":{"title":"bundle install command not found"}},"next":{"fields":{"slug":"/scala-palyframework-curd-1/"},"frontmatter":{"title":"快学Scala+Playframework之增删改查——项目搭建（一）"}}}}}