{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/11-09/eggjs-docker-kubernetes-gitlab/","webpackCompilationHash":"1893e940b14bce61c104","result":{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"4272763d-b0c7-5af4-8986-d04d0ebd81fa","html":"<h2>环境配置</h2>\n<blockquote>\n<p>假设已经了解以下应用和服务的使用场景</p>\n</blockquote>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> 准备一个eggjs应用</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> gitlab<em>github</em>git…</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Node v8.x.x</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> docker</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> kubernetes</li>\n</ul>\n<h2>egg</h2>\n<h3>配置文件config</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> config/config.default.js 本地开发环境</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> config/config.test.js 测试环境</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> config/config.prod.js 生产环境</li>\n</ul>\n<p>部署时，根据不同的环境变量的设置启用不同的配置文件，一般本地开发而言，<code class=\"language-text\">npm run dev</code>采用的是<code class=\"language-text\">config.default.js</code>中的配置。在发布时，测试环境中定义的config会覆盖default中的定义，同样，生产环境中也会覆test中的定义。</p>\n<blockquote>\n<p>本地开发 config.default.js\n测试环境 config.test.js -> config.default.js\n生产环境 config.prod.js -> config.test.js -> config.default.js</p>\n</blockquote>\n<p>例如应用需要msyql，redis等服务配置。一般而言，在本地和测试环境不太考虑性能问题，所以可以将日志开启为<code class=\"language-text\">DEBUG</code>模式，开发环境下数据库应为本地数据库。<code class=\"language-text\">config.default.js</code>如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">appInfo</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  config<span class=\"token punctuation\">.</span>app <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'eggjsapp'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  config<span class=\"token punctuation\">.</span>sequelize <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    dialect<span class=\"token punctuation\">:</span> <span class=\"token string\">'mysql'</span><span class=\"token punctuation\">,</span>\n    database<span class=\"token punctuation\">:</span> <span class=\"token string\">'eggjsapp'</span><span class=\"token punctuation\">,</span>\n    host<span class=\"token punctuation\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token string\">'3306'</span><span class=\"token punctuation\">,</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token punctuation\">:</span> <span class=\"token string\">'123123'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  config<span class=\"token punctuation\">.</span>redis <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    client<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      port<span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Redis port</span>\n      host<span class=\"token punctuation\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Redis host</span>\n      password<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      db<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  config<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token string\">'eggjsapp'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 承载 Session 的 Cookie 键值对名字</span>\n    maxAge<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Session 的最大有效时间</span>\n    httpOnly<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  config<span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// disableConsoleAfterReady: false,</span>\n    consoleLevel<span class=\"token punctuation\">:</span> <span class=\"token string\">'DEBUG'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>测试环境和生产环境一般而言是数据库上的区别。因此，不再重复书写。与config.test[prod].js 如下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">exports<span class=\"token punctuation\">.</span>redis <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  client<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Redis port</span>\n    host<span class=\"token punctuation\">:</span> <span class=\"token string\">'172.1.1.1'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Remote Redis host</span>\n    password<span class=\"token punctuation\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span>\n    db<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span>sequelize <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  dialect<span class=\"token punctuation\">:</span> <span class=\"token string\">'mysql'</span><span class=\"token punctuation\">,</span>\n  database<span class=\"token punctuation\">:</span> <span class=\"token string\">'eggjsapp-test[prod]'</span><span class=\"token punctuation\">,</span>\n  host<span class=\"token punctuation\">:</span> <span class=\"token string\">'eggjsapp-test.db.com'</span><span class=\"token punctuation\">,</span>\n  port<span class=\"token punctuation\">:</span> <span class=\"token string\">'30000'</span><span class=\"token punctuation\">,</span>\n  username<span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token punctuation\">:</span> <span class=\"token string\">'xxxxx'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>环境变量</h3>\n<p>可以通过在npm script 中定义需要的环境变量来加载不同的config文件。从而达到不同环境下使用不同的数据库，日志记录等。</p>\n<h3>日志</h3>\n<p>对于日志，开发和测试环境下可能不太需要将日志输出到文件，为了方便调试，需要将日志直接打印在控制台上，所以可以通过config.logger的日志等级来达到目的。</p>\n<h2>Docker</h2>\n<p>为了达到，一键发布测试与生产环境的效果，并且便于区分生产环境和开发测试环境的配置，这里独立触两个Dockerfile。</p>\n<h3>Dockerfile</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>8.6.0<span class=\"token punctuation\">-</span>alpine\n<span class=\"token keyword\">RUN</span> mkdir <span class=\"token punctuation\">-</span>p /usr/src/app\n<span class=\"token keyword\">WORKDIR</span> /usr/src/app\n<span class=\"token comment\"># add npm package</span>\n<span class=\"token keyword\">COPY</span> package.json /usr/src/app/package.json\n<span class=\"token keyword\">RUN</span> npm i <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>production\n<span class=\"token comment\"># copy code</span>\n<span class=\"token keyword\">COPY</span> . /usr/src/app\n<span class=\"token keyword\">EXPOSE</span> 7001\n<span class=\"token keyword\">CMD</span> npm start</code></pre></div>\n<h3>DEVDockerfile</h3>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>8.6.0<span class=\"token punctuation\">-</span>alpine\n<span class=\"token keyword\">RUN</span> mkdir <span class=\"token punctuation\">-</span>p /usr/src/app\n<span class=\"token keyword\">WORKDIR</span> /usr/src/app\n<span class=\"token comment\"># add npm package</span>\n<span class=\"token keyword\">COPY</span> package.json /usr/src/app/package.json\n<span class=\"token keyword\">RUN</span> npm i <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>production\n<span class=\"token comment\"># copy code</span>\n<span class=\"token keyword\">COPY</span> . /usr/src/app\n<span class=\"token keyword\">EXPOSE</span> 7001\n<span class=\"token keyword\">CMD</span> npm start<span class=\"token punctuation\">:</span>test</code></pre></div>\n<p>package.json中npm script定义如下，区分环境变量和端口</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"egg-scripts start\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"start:test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"EGG_SERVER_ENV=test egg-scripts --port=7008\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Gitlab</h2>\n<p>以上的内容这是包括了代码和镜像，只能在本地使用。想象一下如果需要发布，就需要每次手动docker build并push镜像到远程。</p>\n<p>我们想把它的做的更加自动化一点，于是有了持续集成和持续交付的概念。因此，在这里以gitlab为例。通过gitlab到ci能够做到自动生成镜像和push到远程。</p>\n<p>定义以下的.gitlab.yml，在gitalb stage中定义docker有关，在CI中生成相应代码生产环境之后，进行docker build，同时push到远程，这里涉及到私有docker登录的问题，所以需要docker login, 为了保证安全，docker密码泄露，可以通过文件的方式或者通过在gitlab中设置私密的环境变量获取 <a href=\"https://docs.gitlab.com/ee/ci/variables/\">GitLab CI/CD Variables | GitLab</a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">docker</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">:</span>latest\n  <span class=\"token key atrule\">before_script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> docker login <span class=\"token punctuation\">-</span>u $DOCKER_USER <span class=\"token punctuation\">-</span>p $DOCKER_PASSWORD $DOCKER_REGISTRY\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> docker\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> docker build <span class=\"token punctuation\">-</span>t eggjsapp<span class=\"token punctuation\">:</span>v1.0.0 .\n    <span class=\"token punctuation\">-</span> docker push eggjsapp<span class=\"token punctuation\">:</span>v1.0.0\n  <span class=\"token key atrule\">after_script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> docker logout $DOCKER_REGISTRY</code></pre></div>\n<p><img src=\"https://imgs.beacelee.com/2018/11-16-eggjs-docker-k8s/4.png\"></p>\n<h2>Kubernetes</h2>\n<p>如何本地连接远程集群可以参考<a href=\"https://cloud.tencent.com/document/product/457/8438\">容器服务 通过 Kubectl 连接集群 - Kubectl 操作集群 - 文档平台 - 腾讯云</a>。</p>\n<p>需要以下yaml文件</p>\n<p>deployment.yaml 文件定义简单的物理环境，以及docker镜像</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> extensions/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">qcloud-app</span><span class=\"token punctuation\">:</span> eggjsapp\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> eggjsapp\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> api\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">revisionHistoryLimit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> Recreate\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> NPM_CONFIG_LOGLEVEL\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> info\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> NODE_VERSION\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> 8.6.0\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> YARN_VERSION\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> 1.1.0\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> xxx.com/eggjsapp<span class=\"token punctuation\">-</span>v1.51.0\n        <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> Always\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> shanhushuo\n        <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> 500m\n            <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 1Gi\n          <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> 250m\n            <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 256Mi\n      <span class=\"token key atrule\">imagePullSecrets</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dockerregistrykey\n      <span class=\"token key atrule\">restartPolicy</span><span class=\"token punctuation\">:</span> Always</code></pre></div>\n<p>service.yaml 定义为容器的服务，通过NodePort暴露端口</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> eggjsapp<span class=\"token punctuation\">-</span>service\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> api\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tcp\n    <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30966</span>\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7001</span></code></pre></div>\n<p>最终需要通过ingress暴露至外网，由于我这里采用的是腾讯的私有云，需要在相应ingress直接指向所需服务即可。参考 <a href=\"https://cloud.tencent.com/document/product/457/9111\">容器服务 Ingress转发设置 - 负载均衡 - 文档平台 - 腾讯云</a></p>\n<h2>示例：在腾讯云中讲上述所有应用串联起来</h2>\n<ol>\n<li>\n<p>首先需要在腾讯云中授权你的代码，通过gitlab的token授权，授权成功后，可以在镜像配置中构建镜像。可以设置镜像的触发时机。\n<img src=\"https://imgs.beacelee.com/2018/11-16-eggjs-docker-k8s/5.png\"></p>\n</li>\n<li>\n<p>建立自己的私有镜像之后就需要来部署了。首先在腾讯云中创建集群，集群创建完成之后创建一个服务\n<img src=\"https://imgs.beacelee.com/2018/11-16-eggjs-docker-k8s/6.png\">\n<img src=\"https://imgs.beacelee.com/2018/11-16-eggjs-docker-k8s/7.png\">\n<img src=\"https://imgs.beacelee.com/2018/11-16-eggjs-docker-k8s/8.png\"></p>\n</li>\n<li>\n<p>如果构建的镜像没有问题，服务创建完成之后就可以访问了。可以通过ip+端口进行访问。如果需要进行域名的绑定和端口的映射，可以通过配置ingress来暴露外网。\n<img src=\"https://imgs.beacelee.com/2018/11-16-eggjs-docker-k8s/10.png\"></p>\n</li>\n<li>\n<p>如果再做的自动化一点，可以在镜像中设置触发器，当镜像构建完成之后，可以通过触发器使集群中的服务自动更新镜像。\n<img src=\"https://imgs.beacelee.com/2018/11-16-eggjs-docker-k8s/9.png\"></p>\n</li>\n</ol>\n<h2>总结</h2>\n<p>假如获取pod时报如下错误，可以查看下kubectl版本\n<img src=\"https://imgs.beacelee.com/2018/11-16-eggjs-docker-k8s/1.png\"></p>\n<p>以下截图为kubectl版本太高后重新安装1.8版本后成功获取pod\n<img src=\"https://imgs.beacelee.com/2018/11-16-eggjs-docker-k8s/2.png\"></p>\n<p>进入容器之后查看具体日志文件\n<img src=\"https://imgs.beacelee.com/2018/11-16-eggjs-docker-k8s/3.png\"></p>","frontmatter":{"title":"从0到1部署一个eggjs应用","date":"November 16, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018/11-09/eggjs-docker-kubernetes-gitlab/","previous":{"fields":{"slug":"/2018/11-09/electron-10-questions/"},"frontmatter":{"title":"electron 10 问 10 答"}},"next":{"fields":{"slug":"/2018/11-25/hoc-vs-children-vs-render-props/"},"frontmatter":{"title":"HOC VS Children VS Render Props"}}}}}