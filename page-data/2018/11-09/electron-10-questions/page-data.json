{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/11-09/electron-10-questions/","webpackCompilationHash":"aafb099bc401288f620b","result":{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"7c8f1df4-25c0-5b9c-bd96-4cecb760b0b8","html":"<ol>\n<li>如何利用NodeJS 子进程为 electron render 提供 API server，以及维护子进程的状态</li>\n</ol>\n<p>可以通过NodeJS 内置模块 child_process spawn 文件，并且watch文件的状态。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> childProcess<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dirPath<span class=\"token punctuation\">,</span> binariesPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  cwd<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  env<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnode<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`stdout: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 main.js 中引入 child , 保证在渲染之前子进程已经调用。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> childProcess <span class=\"token keyword\">from</span> <span class=\"token string\">'./child'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在electron退出时杀死进程，以免造成 API 端口的占用。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before-quit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  childProcess<span class=\"token punctuation\">.</span><span class=\"token function\">kill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SIGINT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>如何更新时不覆盖用户的登录状态和动态生成的缓存文件</li>\n</ol>\n<p>electron 更新时会将 application 中的内容覆盖，导致文件丢失。</p>\n<p>不过 electron 提供了获取 <code class=\"language-text\">userData</code> 的 API， 可以根据 <code class=\"language-text\">electron.app.getPath(&#39;userData&#39;)</code> 获取用户存储信息的位置，在 MacOS 下为 <code class=\"language-text\">/Users/username/Library/Application Support/appname</code>，可以将用户信息存储和缓存问题件存储在这个位置，从而避免更新时覆盖源文件。</p>\n<ol start=\"3\">\n<li>Windows 如何进行选择目录安装，electron-builder 配置介绍</li>\n</ol>\n<p>通过 electron builder 进行 electron 打包时，Windows 环境下添加如下配置</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"win\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"nsis\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"nsis\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"oneClick\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"allowToChangeInstallationDirectory\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样 Windows 用户在安装时会提示用户选择安装位置</p>\n<ol start=\"4\">\n<li>如何自动更新（MacOS）</li>\n</ol>\n<p>首先需要再Mac下自签发一张代码签名证书。electron-build 在打包签名时会自动匹配当前的可信证书。不同证书打包出来的应用是不可以自动更新的，包括appid不一致也会导致更新不成功。</p>\n<p>mac下创建代码签名证书在钥匙串->证书助理中创建，并确保证书可信。创建成功后，双击证书，选择系统信任。</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/2018/11-09/20181109174551.png\"></p>\n<p>可以采用 <a href=\"https://github.com/megahertz/electron-simple-updater/tree/master/example\">electron-simple-updater/example at master · megahertz/electron-simple-updater · GitHub</a> 进行更新配置。由于 electron builder 采用的是两个 package.json <a href=\"https://www.electron.build/tutorials/two-package-structure\">Two package.json Structure - electron-builder</a> 的结构, 即开发依赖和应用依赖。简单理解为根目录下，应该存放打包需要的环境以及工具等依赖，在真正 app 中的依赖是最终打包到 electron 中去的。 因此需要把 electron-simple-updater 放在 <code class=\"language-text\">./app/package.json</code>中，并且在<code class=\"language-text\">package.json</code>中添加<code class=\"language-text\">updater</code>的远程地址。</p>\n<p>最终你的配置应该与下面的类似</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// ./app/package.json</span>\n<span class=\"token property\">\"updater\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://update.domain.com/updates.json\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"electron-simple-updater\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.2.4\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>具体 updates.json 包含如下</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"win32-x64-prod\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"readme\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Second release\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"update\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/megahertz/electron-simple-updater/releases/download/win32-x64-prod-v0.0.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"install\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/megahertz/electron-simple-updater/releases/download/win32-x64-prod-v0.0.2/Simple.Updater.Example.Setup.0.0.2.exe\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.2\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"darwin-x64-prod\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"readme\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Second Release\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"update\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/megahertz/electron-simple-updater/releases/download/darwin-x64-prod-v0.0.2/release.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"install\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/megahertz/electron-simple-updater/releases/download/darwin-x64-prod-v0.0.2/Simple.Updater.Example-0.0.2.dmg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.2\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"linux-x64-prod\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"update\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/megahertz/electron-simple-updater/releases/download/linux-x64-prod-v0.0.2/simple-updater-example-0.0.2-x86_64.AppImage\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"install\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/megahertz/electron-simple-updater/releases/download/linux-x64-prod-v0.0.2/simple-updater-example-0.0.2-x86_64.AppImage\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.2\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"5\">\n<li>CI如何在一个平台构建多个平台的安装包</li>\n</ol>\n<p>electron 支持在一个平台打包多个平台的安装包，为了和本地开发环境保持一致，可以在ci中通过shell的方式直接在MacOS上进行打包。</p>\n<ol start=\"6\">\n<li>如何将额外的文件打包至app/content 中</li>\n</ol>\n<p>可以在开发环境下的package.json 文件中增加额外的文件，例如</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extraFiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"from\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"binaries/${os}\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"to\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"binaries/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"filter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"**/*\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以根据不同的操作系统附加不同的文件，例如上面的配置打包之后会在应用程序的目录下出现 binaries 包文件。</p>\n<p>开发过程中可以通过指定环境变量的方式来使用不同文件的包。</p>\n<ol start=\"7\">\n<li>headless模式下如何自定义关闭按钮</li>\n</ol>\n<p>通过 electron 中的事件进行模拟。MacOS下关闭事件并不杀死进程，与Windows和linux进行区分。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> remote <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">handleClose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isWindows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">isLinux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    remote<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    remote<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleMinimize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    remote<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">minimize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleFullscreen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    remote\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">setFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>remote<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      fullscreen<span class=\"token punctuation\">:</span> remote<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"8\">\n<li>electron 图标</li>\n</ol>\n<p>可以通过下面的工具将一张图片转换成多张不同尺寸的图片，并且可以导出ico、icns格式的图片。</p>\n<p><a href=\"https://iconverticons.com/online/\">ICON CONVERTER: Convert PNG to ICO and ICNS online - iConvert Icons</a></p>\n<ol start=\"9\">\n<li>无边窗口的拖动\n要使整个窗口可拖拽, 可以直接在body中添加如下样式</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-app-region</span><span class=\"token punctuation\">:</span> drag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>同时需要将其中触发点击事件的元素标记为不可拖拽, 不然无法点击</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.no-drag</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-app-region</span><span class=\"token punctuation\">:</span> no-drag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果只想要自定义的标题栏进行拖拽，则可以使用如下样式</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.titlebar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-app-region</span><span class=\"token punctuation\">:</span> drag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"10\">\n<li>主进程与渲染进程的通信</li>\n</ol>\n<p>以一个点击菜单为例， 点击菜单后在渲染进程监听动作并执行操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  label<span class=\"token punctuation\">:</span> <span class=\"token string\">'偏好设置...'</span><span class=\"token punctuation\">,</span>\n  accelerator<span class=\"token punctuation\">:</span> <span class=\"token string\">'Command+,'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">click</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">menuItem<span class=\"token punctuation\">,</span> currentWindow</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    currentWindow<span class=\"token punctuation\">.</span>webContents<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'openPreferences'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">ipcRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getPreferences'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    isPreferencesOpen<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>prevState<span class=\"token punctuation\">.</span>isPreferencesOpen\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>webContents 属于主进程，向网页发送消息，接收到后打开『偏好设置』。</p>","frontmatter":{"title":"electron 10 问 10 答","date":"November 09, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018/11-09/electron-10-questions/","previous":{"fields":{"slug":"/ci-research/"},"frontmatter":{"title":"关于 CI 及测试有关知识工具总结"}},"next":{"fields":{"slug":"/2018/11-09/eggjs-docker-kubernetes-gitlab/"},"frontmatter":{"title":"从0到1部署一个eggjs应用"}}}}}