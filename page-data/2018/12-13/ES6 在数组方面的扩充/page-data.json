{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/12-13/ES6 在数组方面的扩充/","webpackCompilationHash":"a7e2b21b509852c48099","result":{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"dedffdb0-8ab9-54b4-877d-477cb0d32665","html":"<p>数组可谓是在JavaScript中最常用的数据结构了，下面来盘点一下ES6在数组中新增的功能。</p>\n<h2>Array.of</h2>\n<h3>背景</h3>\n<p>在JavaScript中声名一个数组有多种方式，常见的有以下两种</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>第一种往往用的最多，通常直接实例化一个Array，类似于 new Array 的写法，第二种不太常用，直接使用构造器声名一个数组。</p>\n<h3>解决的问题</h3>\n<p>Array.of 的出现，也是为了解决第二种存在的问题。首先通过构造器声名一个数组可以传递r若干数组元素，如果只有一个数值参数，那么数值的作用确实来定义数组的长度的。例如 <code class=\"language-text\">const a = Array(3)</code>, 这里定义了数组的长度为3，这里存在一个问题，数组<code class=\"language-text\">a</code>的长度的确为3，由于没有进行数据的初始化，所以 a[0],a[1],a[2]都为 <code class=\"language-text\">undefined</code>,但是其实数组内都是空元素。空元素（empty）和 undefined 虽然说表现形式一样，都可以通过for 循环来迭代，但是，部分Array原型链上的函数会跳过空元素。例如map方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [empty * 3]</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出3个undefined</span></code></pre></div>\n<p>于是就有了Array.of 方法来避免这个问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1]</span></code></pre></div>\n<h3>总结</h3>\n<p>不过虽然有了这样的方法，但是还是不常用，对于有人说方便传递参数类似这种形式，但是早就已经有其他替代方案去解决。同事也提示我们注意一个问题，<strong>尽量避免在数组中存在空元素</strong>。</p>\n<h2>Array.from(iterable, [callback])</h2>\n<h3>背景</h3>\n<p>Array.from 常常被人们用来将“类数组”转化为数组。它首先检查第一个参数是否可迭代。如果可迭代，他会将元素同一的copy到数组中。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tlength<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['B', 'L']</span></code></pre></div>\n<h3>解决的问题</h3>\n<p>除了能将“类数组”转化为数组之外，还可以避免上面说的空槽位（empty）现象。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Array.from({ length: 3 }) // [undefined, undefined, undefined]</code></pre></div>\n<p>Array.from 第二个参数为回调函数，可以实现类似map的功能。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"b\", \"l\"]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Array.copyWithin(target, start, end)</h2>\n<h3>背景</h3>\n<p>额…我实在我清楚这个方法到底是为了适应什么场景，对我而言，貌似是为了节省内存？</p>\n<h3>Feature</h3>\n<p>copyWithin(target, start, end) , 顾名思义，是在数组内部进行的copy。copy的是内部的数据，改变的也是内部的数据。也就是说，该方法不会增加数组长度，并且会覆盖原数组。例如在下面的数组a中copy 从第三个元素开始覆盖，并且从第1个元素copy。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 1, 2, 3]</span></code></pre></div>\n<p>我们定义数组长度为变量<code class=\"language-text\">len</code>,目标元素和复制的起始位置分别为<code class=\"language-text\">target</code>，<code class=\"language-text\">start</code>。</p>\n<p>加入在复制过程当中，<code class=\"language-text\">len - start &gt; len - target</code>,那该过程也会到此为止，不会再继续覆盖。此时看起来好像是从左到右进行一次复制覆盖，当<code class=\"language-text\">target - start = 1</code>时，也就是<code class=\"language-text\">a.copyWithin(2, 1);</code>.此时，看上去会出现这样的情况<code class=\"language-text\">[1,2,2,2,2]</code>。我们来分析下这个过程。</p>\n<blockquote>\n<ol>\n<li>数值 3 被选为目标，2 (start = 1 )  被选为开始复制的元素，copy 2 -> cover 3, 数组变为 [1,2,2,4,5]</li>\n<li>数值 4 被选为目标，2（start = 2）被选为开始复制的元素，copy2 -> cover 4,数组变为[1,2,2,2,5]</li>\n<li>数值 5 被选为目标，2（start = 3）被选为开始复制的元素，copy2 -> cover 5,数组变为[1,2,2,2,2]</li>\n</ol>\n</blockquote>\n<p>但是事实上运行结果应该是 <code class=\"language-text\">[1,2,2,3,4]</code>。显然，此时复制算法是从右向左进行。</p>\n<p>如果上述参数某一个为负值，则是按照数组结束的相对位置进行复制。</p>\n<h2>Array.fill(item, start, end)</h2>\n<h3>背景</h3>\n<p>在一开始我们说到数组初始化没有赋值的问题，因此需要有一个可以用来对数组进行赋值，并且相对灵活的方式。例如，第三个到第五个需要赋值，其他都为 <code class=\"language-text\">undefined</code>。</p>\n<h3>解决的问题</h3>\n<p>Array.fill 字面意思就是填充数组，调用方式如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [3, 3, 3]</span></code></pre></div>\n<p>还可以定义其他两个参数</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// [undefined, 0, 0, 0, 0]</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>总结</h3>\n<p>Array.fill 在初始化一些重复的值还是有很大作用。可以设置默认数组携带的元素。</p>\n<h2>Array.find()</h2>\n<h3>背景</h3>\n<p>以往我们来寻找数组中的某个元素时，可以通过迭代它，来判断元素是否为目标元素。或者通过indexOf,some方法来找到是否存在当前元素。</p>\n<h3>解决的问题</h3>\n<p>上述的两种方式分别返回数组的索引和一个布尔值。是否有某个方法直接可以找到该数组的元素值呢？</p>\n<p>Array.find 解决了这一问题。通常我们用来寻找比较复杂的数据结构。类似下面这样。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {name: 'B', age: 10}</span>\n<span class=\"token keyword\">const</span> targetItem <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>总结</h3>\n<p>在此多说一嘴，Array.some 在查找当前元素是否存在并且我们不需要其他返回的生活，有些性能上的优势。some在找到之后立即停止查找，所以不会多余的迭代数组。</p>\n<h2>Array.findIndex()</h2>\n<h3>背景</h3>\n<p>通常取某个数组元素的下标时，都会通过 indexOf,来获取，当数组中元素数据结构比较复杂，在indexOf中强行判断貌似不是一个很好的解决办法。</p>\n<h3>解决的问题</h3>\n<p>是否可以通过传入函数的方式，类似find 的形式，增加一些其他逻辑，来精确比较某一项。findIndex 方法解决了这一问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 0</span>\n<span class=\"token keyword\">const</span> targetIndex <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>总结</h3>\n<p>之前经常看到这样的代码，<code class=\"language-text\">xxx.indexOf(xxx) &gt; -1</code>，当然可以，不过上面说过了更好的办法，通过some去寻找更佳。因此findIndex最好也不要这样使用。</p>\n<h2>其他</h2>\n<p>除上述方法之外，数组还增加了 <code class=\"language-text\">entries.values,keys</code> 等方法。类似于类Object的形式。我们放在Object的ES6 Feature在详细说。</p>","frontmatter":{"title":"ES6 在数组方面的扩充","date":"December 13, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018/12-13/ES6 在数组方面的扩充/","previous":{"fields":{"slug":"/2018/11-25/hoc-vs-children-vs-render-props/"},"frontmatter":{"title":"HOC VS Children VS Render Props"}},"next":{"fields":{"slug":"/2018/12-16/如何将公司私有项目做得和开源项目一样优秀/"},"frontmatter":{"title":"如何将公司私有项目做得和开源项目一样优秀"}}}}}