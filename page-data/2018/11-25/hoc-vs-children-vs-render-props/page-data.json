{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/11-25/hoc-vs-children-vs-render-props/","webpackCompilationHash":"aafb099bc401288f620b","result":{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"e0f64bb1-e8d3-5f46-a7c9-8aa860b530ae","html":"<h2>简介</h2>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> HOC(Higher-Order Components) 是react中通过高阶组件来抽象逻辑的用法。它并不是React提供的API，而是一种通过在JavaScript函数传参的形式来减少代码逻辑。</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Children 是 React 通过  props 向下暴露的 API，可以简单的理解为在任何被JSX标签包裹的组件都是其外层组件的孩子（children）。</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Render Props 是通过函数的形式来传递 props 达到组件共享数据的一种方式。</li>\n</ul>\n<h2>共同的作用</h2>\n<p>其实，这三种在 React 中的组件构建方式最核心的目的只有两个，要么是组件间相互通信，要么是将公共的逻辑抽象。</p>\n<p>我们都知道 React 通过组件作为单位来整合最基础的Page。除了直接书写html元素之外，组件（Component）可以理解为 React 应用中的最小单位了。有时候为了更加友好的书写组件的测试，拆分业务逻辑，最大可能得复用组件，就不得不需要将组件间拆分的很细，与此同时，由于 React 中单向数据流的特性，以上的设计未免带来许多困扰。</p>\n<p>这篇文章，用来梳理一下在不同场景中，通过 props 进行通信的三种选择。会提到一些优劣势的问题和取舍关系。</p>\n<h2>Children</h2>\n<p>在 React 中，可以将除根节点以外的任何JSX元素理解为是某个元素的children，同样，只要不是叶子节点，任何元素也可以理解为某个元素的parent。</p>\n<p>可以通过<code class=\"language-text\">this.props.children</code>拿到当前元素都孩子节点，children 的存在就像一个插槽，你可以在父元素的某个具体位置，插入任何 React Element。例如，在web页面经典的三栏布局中，需要有<code class=\"language-text\">PageHeader</code>,<code class=\"language-text\">Sidebar</code>始终保持在页面固定位置，而<code class=\"language-text\">Content</code>需要动态的变化，因此产生了类似如下的代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// LayoutComponent</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Layout</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Header</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Sidebar</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Sidebar</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Content</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Layout</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>通过引用<code class=\"language-text\">LayoutComponent</code>，具体的内容便显示在<code class=\"language-text\">Content</code>组件中间</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> LayoutComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'LayoutComponent'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// in render return</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LayoutComponent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  hello, I'm content in LayoutComponent!\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">LayoutComponent</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>通过以上的方式动态的插入 children ，在任何页面只需被<code class=\"language-text\">LayoutComponent</code> 包裹，就可以使用该布局，达到了复用Layout的目的。</p>\n<p>这其实是一个很简单的操作，类似一些模板引擎也可以做到类似的效果。更重要的是，假如 Layout 需要向 children 动态传入一些数据，类似的，Layout 可能有一些全局配置，是通过路由来改变，而 content 中如何接收到路由的信息呢？可能没有太好的办法，<code class=\"language-text\">this.props.children</code> 毕竟不是一个可以传递参数的函数。</p>\n<p>还好，React 中的静态方法可以帮助我们。 Class  Component 的写法，本质上是通过React.CreateElement 来实现的，React 还提供了CloneElement的方法，来克隆一个组件。对于次场景，可以通过CloneElement的第二个参数来实现对 children 的传参。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> routes<span class=\"token punctuation\">:</span> routes <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面我们通过cloneElement 将 routes 信息传递给了 children,在children中可以通过 <code class=\"language-text\">this.props.routes</code> 的方式获取到路由信息。</p>\n<h2>Render Props</h2>\n<p>顾名思义，<code class=\"language-text\">render props</code>的实现原理就是根据名为<code class=\"language-text\">render</code>的props，通过改变<code class=\"language-text\">render</code>，来改变自身的渲染逻辑。</p>\n<p>Render中接受一个函数，通过函数方式返回一个新的组件，只要有函数就可以通过传递参数的方式动态传递变量。例如如下代码通过传递<code class=\"language-text\">count props</code>来传递初始化的值。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> RenderProps <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/RenderProps'</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RenderProps</span></span> <span class=\"token attr-name\">render</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RenderProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> RenderProps<span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看到render props的方式每次都创建一个function，若参数中的值频繁变化，可以采用这种方式，类似于<code class=\"language-text\">react-motion</code>、<code class=\"language-text\">react-router</code>的库都会采用这种方式。</p>\n<p>其实在children props也支持这种方式，类似如下写法。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> RenderProps <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/RenderProps'</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RenderProps</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n&lt;/RenderProps\u0010>\n\nimport React from 'react';\nclass RenderProps extends React.Component </span><span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\nexport default RenderProps;</span></code></pre></div>\n<p>在 react 中也提提到了这一特点。</p>\n<blockquote>\n<p>It’s important to remember that just because the pattern is called “render props” you don’t have to use a prop named render to use this pattern. In fact, any prop that is a function that a component uses to know what to render is technically a “render prop”.</p>\n</blockquote>\n<p>也就是说任何的props影响到渲染的props都可以这样去实现，并不局限于render。</p>\n<p>总之，render props 通过指定了children的props，来进行通信，所以，对于改变的props，父组件是有绝对知情权的，也就是说父组件需要知道子组件用 props 来具体做什么。因此，render props 通常使用在对 props 经常变化，并且对子元素严格把控的场景下。</p>\n<h2>HOC</h2>\n<p>HOC其实来源于HOF，high-order function。高阶函数的本质是将其他函数作为自己的参数或者返回值为函数。</p>\n<p>在React中，<em>其他函数</em>指的就是component。HOC有点像mixin，react 通过这种方式让 mixin 支持了class。作为一种抽象方式，HOC方式不仅仅可以传递children，还可以传递事件、数据等等。</p>\n<p>例如，假设有一组类似的计数组件都包含onClick这样的逻辑，但是并不确定组件如何构成，但是知道组件肯定需要这样一种业务逻辑。这就是HOC的关键。</p>\n<p>你是知道组件需要做什么事的，表单提交还是公共逻辑的提取。但是具体长什么样子，由谁来做并不是你的重点。重点只需要拥有该方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Wrapper</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrapperedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> React<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hoc count'</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WrapperedComponent</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Wrapper<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">import</span> HOCComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/HOC'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Hoc <span class=\"token operator\">=</span> <span class=\"token function\">HOCComponent</span><span class=\"token punctuation\">(</span>Hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hoc</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>","frontmatter":{"title":"HOC VS Children VS Render Props","date":"November 25, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018/11-25/hoc-vs-children-vs-render-props/","previous":{"fields":{"slug":"/2018/11-09/eggjs-docker-kubernetes-gitlab/"},"frontmatter":{"title":"从0到1部署一个eggjs应用"}},"next":{"fields":{"slug":"/2018/12-13/ES6 在数组方面的扩充/"},"frontmatter":{"title":"ES6 在数组方面的扩充"}}}}}