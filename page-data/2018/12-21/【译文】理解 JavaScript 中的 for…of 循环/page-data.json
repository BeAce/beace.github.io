{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/12-21/【译文】理解 JavaScript 中的 for…of 循环/","webpackCompilationHash":"aafb099bc401288f620b","result":{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"f87e294a-d4e8-5146-8714-b6a7a7c16cac","html":"<blockquote>\n<p>原文链接： <a href=\"https://blog.bitsrc.io/understanding-the-for-of-loop-in-javascript-8aded97d7ef8\">Understanding the For…of Loop In JavaScript</a></p>\n</blockquote>\n<p>在  JavaScript 中，我们有很多循环语句。</p>\n<ul>\n<li><code class=\"language-text\">while</code> 语句</li>\n<li><code class=\"language-text\">do...while</code> 语句</li>\n<li><code class=\"language-text\">for</code> 语句</li>\n<li><code class=\"language-text\">for...in</code> 语句</li>\n<li><code class=\"language-text\">for...of</code> 语句</li>\n</ul>\n<p>所有这些语句都有一个最基础的共同功能：他们会一直重复，直到到达某个条件。</p>\n<p>在这篇文章，我们将研究 <code class=\"language-text\">for…of</code> 表达式来查看它是如何工作的并且如何在 JavaScript 应用中利用它书写更好的代码。</p>\n<p>技巧：使用 <a href=\"https://github.com/teambit/bit\">Bit</a>  构造一个 js 应用是非常快速的。使用 Bit 可以快速的在不同项目中分享和复用公共组件，可以在团队中分享，就像玩乐高那样简单。你可以免费使用它。</p>\n<h2>for…of</h2>\n<p><code class=\"language-text\">for…of</code> 是 <code class=\"language-text\">for</code> 语句的一种循环 <code class=\"language-text\">iterables(iterable objects)</code>（可迭代对象） ，直到它到达它的终止条件的一种形式。</p>\n<p>下面是一个简答的例子。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// It logs:</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// 6</span>\n<span class=\"token comment\">// 8</span>\n<span class=\"token comment\">// 10</span></code></pre></div>\n<p>我们可以用比 <code class=\"language-text\">for</code> 语句更少的代码来迭代数组 <code class=\"language-text\">arr</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myname <span class=\"token operator\">=</span> <span class=\"token string\">\"Nnamdi Chidume\"</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a <span class=\"token keyword\">of</span> myname<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// It logs:</span>\n<span class=\"token comment\">// N</span>\n<span class=\"token comment\">// n</span>\n<span class=\"token comment\">// a</span>\n<span class=\"token comment\">// m</span>\n<span class=\"token comment\">// d</span>\n<span class=\"token comment\">// i</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// C</span>\n<span class=\"token comment\">// h</span>\n<span class=\"token comment\">// i</span>\n<span class=\"token comment\">// d</span>\n<span class=\"token comment\">// u</span>\n<span class=\"token comment\">// m</span>\n<span class=\"token comment\">// e</span></code></pre></div>\n<p>你应该直到，如果使用循环，我们不得不使用相关的数学知识和逻辑来计算到达循环 <code class=\"language-text\">myname</code> 的终点并推出程序。但是 <code class=\"language-text\">for…of</code> 语句帮我们解决了这个头疼的问题。</p>\n<p>正如我们看到的，<code class=\"language-text\">for..of</code>  一般有以下定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> variable <span class=\"token keyword\">of</span> iterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">variable</code> 保存了每次迭代的 iterable 中对象的值</li>\n<li><code class=\"language-text\">iterable</code> 是要被迭代的对象</li>\n</ul>\n<h2>Iterables and Iterator (迭代对象和迭代器)</h2>\n<p>在 <code class=\"language-text\">for…of</code> 循环的定义中，我们说它“循环遍历可迭代对象（iterable objects）”。因此有了上述定义就意味着 <code class=\"language-text\">for...of</code> 只能被用于可迭代的对象，否则不能使用 <code class=\"language-text\">for...of</code> 循环。</p>\n<p>那么，什么是可迭代对象（Iterables）呢？</p>\n<p>简单的说，可迭代对象是可以执行迭代的对象。在 ECMASCRIPT 2015  中加入了一个 <code class=\"language-text\">coupla</code>。这些新增内容是新协议。协议中包括Iterator协议和Iterable协议。</p>\n<p>根据 Mozilla 开发者说，“iterable 协议允许 JavaScript 对象去定义或者自定义迭代行为，例如在 <code class=\"language-text\">for..of</code> 构造中循环的值。” 并且，“为了可迭代，对象必须实现 <code class=\"language-text\">@@iterator</code> 方法，意味着对象必须包含（或者在其原型链中包含）一个 <code class=\"language-text\">@@interator</code> 的属性，这个属性可以通过常量<code class=\"language-text\">Symbol.iterator</code>获得”</p>\n<p>这实际上意味着，如果想要你的对象可以使用 <code class=\"language-text\">for…of</code> 进行迭代，它必须是可迭代对象（interables），换言之，必须具有 <code class=\"language-text\">@@iterator</code> 属性。这样才符合可迭代协议（iterable protocol）。</p>\n<p>因此，当对对象具有 <code class=\"language-text\">@@iterator</code> 时，它就可以被 <code class=\"language-text\">for…of</code> ，<code class=\"language-text\">@@interator</code> 方法由 <code class=\"language-text\">for...of</code> 调用。<code class=\"language-text\">@@interator</code> 返回一个迭代器（interator）。</p>\n<p>现在，可迭代协议定义了一种可以从对象中返回值的流的方式。迭代器必须实现 <code class=\"language-text\">next</code> 方法。<code class=\"language-text\">next</code> 方法需要遵守以下几个规则。</p>\n<ul>\n<li>必须返回一个带有 <code class=\"language-text\">done</code> 属性的对象。类似<code class=\"language-text\">value {done, value}</code></li>\n<li><code class=\"language-text\">done</code> 属性是一个布尔值，表示是否到达流的末尾</li>\n<li><code class=\"language-text\">value</code> 属性 保存当前周期的值</li>\n</ul>\n<p>举个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createIterator</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Nnamdi'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Chidume'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span>  <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">next</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token operator\">++</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> array<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> array<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        index<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Nnamdi</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Chidume</span></code></pre></div>\n<p>基本上，<code class=\"language-text\">@@iterator</code> 返回了一个迭代器（interator），<code class=\"language-text\">for…of</code> 用来循环对象并且获取其值。因此，如果一个对象不包含<code class=\"language-text\">@@interator</code> 方法并且（或者）返回的不是一个迭代器（interator），<code class=\"language-text\">for…of</code> 语句不能正常迭代。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> nonIterable <span class=\"token operator\">=</span> <span class=\"token comment\">//...</span>\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> a <span class=\"token keyword\">of</span> nonIterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// ...</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> a <span class=\"token keyword\">of</span> nonIterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token operator\">^</span>\nTypeError<span class=\"token punctuation\">:</span> nonIterable is not iterable</code></pre></div>\n<p>例如有一些可迭代对象：</p>\n<ul>\n<li>String</li>\n<li>Map</li>\n<li>TypedArray</li>\n<li>Array</li>\n<li>Set</li>\n<li>Generator</li>\n</ul>\n<p>注意这里少了 <code class=\"language-text\">Object</code>。<code class=\"language-text\">Object</code>不是一个可迭代对象。如果我们尝试使用 <code class=\"language-text\">for…of</code> 循环去遍历 <code class=\"language-text\">Object</code> 中的属性:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token punctuation\">{</span>\n    firstname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Nnamdi\"</span><span class=\"token punctuation\">,</span>\n    surname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Chidume\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>它将会抛出以下错误：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token operator\">^</span>\nTypeError<span class=\"token punctuation\">:</span> obj is not iterable</code></pre></div>\n<p>我们可以通过以下方式来检查一个对象是否为可迭代对象</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Chidume'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span></code></pre></div>\n<p>可以看到，它打印出了 <code class=\"language-text\">function</code>，这表明在 <code class=\"language-text\">String</code> 存在<code class=\"language-text\">@@iterator</code> 属性。如果我们尝试 <code class=\"language-text\">Object</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    surname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Chidume\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">undefined</span></code></pre></div>\n<p>Woo!!  <code class=\"language-text\">undefined</code> 意味着不存在。</p>\n<h2>for…of: Array</h2>\n<p>数组是可迭代对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nnamdi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chidume\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// function</span></code></pre></div>\n<p>这也是为什么我们可以使用 <code class=\"language-text\">for…of</code> 来遍历它的原因。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Chidume\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nnamdi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"loves\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JS\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// It logs:</span>\n<span class=\"token comment\">// Chidume</span>\n<span class=\"token comment\">// Nnamdi</span>\n<span class=\"token comment\">// loves</span>\n<span class=\"token comment\">// JS</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chidume\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nnamdi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"loves\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JS\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// It logs:</span>\n<span class=\"token comment\">// Chidume</span>\n<span class=\"token comment\">// Nnamdi</span>\n<span class=\"token comment\">// loves</span>\n<span class=\"token comment\">// JS</span></code></pre></div>\n<h2>for…of: String</h2>\n<p><code class=\"language-text\">String</code> 也是可迭代对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myname <span class=\"token operator\">=</span> <span class=\"token string\">\"Chidume Nnamdi\"</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> myname<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// It logs:</span>\n<span class=\"token comment\">// C</span>\n<span class=\"token comment\">// h</span>\n<span class=\"token comment\">// i</span>\n<span class=\"token comment\">// d</span>\n<span class=\"token comment\">// u</span>\n<span class=\"token comment\">// m</span>\n<span class=\"token comment\">// e</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// N</span>\n<span class=\"token comment\">// n</span>\n<span class=\"token comment\">// a</span>\n<span class=\"token comment\">// m</span>\n<span class=\"token comment\">// d</span>\n<span class=\"token comment\">// i</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Young\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// It logs:</span>\n<span class=\"token comment\">// T</span>\n<span class=\"token comment\">// h</span>\n<span class=\"token comment\">// e</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Y</span>\n<span class=\"token comment\">// o</span>\n<span class=\"token comment\">// u</span>\n<span class=\"token comment\">// n</span>\n<span class=\"token comment\">// g</span></code></pre></div>\n<h2>for…of: Map</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"surname\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chidume\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"firstname\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Nnamdi\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// It logs:</span>\n<span class=\"token comment\">// [\"surname\", \"Chidume\"]</span>\n<span class=\"token comment\">// [\"firstname\",\"Nnamdi\"]</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`key: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, value: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// It logs:</span>\n<span class=\"token comment\">// key: surname, value: Chidume</span>\n<span class=\"token comment\">// key: firstname, value: Nnamdi</span></code></pre></div>\n<h2>for…of: Set</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Chidume\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Nnamdi\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// It logs:</span>\n<span class=\"token comment\">// Chidume</span>\n<span class=\"token comment\">// Nnamdi</span></code></pre></div>\n<h2>for…of: TypedArray</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> typedarray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0xe8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xb4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xf8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xaa</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> typedarray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// It logs:</span>\n<span class=\"token comment\">// 232</span>\n<span class=\"token comment\">// 180</span>\n<span class=\"token comment\">// 248</span>\n<span class=\"token comment\">// 170</span></code></pre></div>\n<h2>for…of: arguments</h2>\n<p><code class=\"language-text\">arguments</code> 是可迭代对象吗？让我们来检验一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// testFunc.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> arguments<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n$ node testFunc\n<span class=\"token keyword\">function</span></code></pre></div>\n<p>事实证明，它是的。如果我们更进一步调查，<code class=\"language-text\">arguments</code> 实际上是<code class=\"language-text\">IArguments</code>类型，并且实现<code class=\"language-text\">IArguments</code>接口的类具有<code class=\"language-text\">@@iterator</code>属性，该属性使参数可迭代。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// testFunc.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> arguments<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> arguments<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chidume\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// It:</span>\n<span class=\"token comment\">// Chidume</span></code></pre></div>\n<h2>for…of: Custom Iterables</h2>\n<p>正如我们上面所说的，我们创建一个自定义的可迭代对象使得 <code class=\"language-text\">for…of</code> 可以遍历它。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Chidume\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nnamdi\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">next</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                value <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token operator\">++</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                value <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token operator\">++</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        index<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我创建了一个对象 <code class=\"language-text\">obj</code>并且使他可迭代，我通过 <code class=\"language-text\">[Symbol.iterator]</code> 增加了<code class=\"language-text\">@@interator</code> 属性。然后， <code class=\"language-text\">function</code> 最终返回一个迭代器（interator）。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">next</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>记住，一个迭代器需要有一个 <code class=\"language-text\">next</code> 函数。</p>\n<p>在 <code class=\"language-text\">next</code> 函数中，我定义的值将在迭代执行期间返回给 <code class=\"language-text\">for…of</code>。看上面的代码，你可以清楚的看到我做了什么。</p>\n<p>让我们来测试一下 是用 <code class=\"language-text\">for...of</code> 遍历 <code class=\"language-text\">obj</code> 会得到什么：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// customIterableTest.js</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n$ node customIterableTest\nChidume\nNnamdi</code></pre></div>\n<p>是的，它正确执行了：）！</p>\n<h2>使对象和普通对象可迭代</h2>\n<p>普通对象(Plain objects)不可迭代，而且<code class=\"language-text\">Object</code>中的对象也不可迭代。</p>\n<p>我们可以通过使用自定义迭代器将 <code class=\"language-text\">@@iterator</code> 添加到Object.prototype来实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> properties <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">let</span> isdone <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">next</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>properties<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> properties<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            isdone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n        count<span class=\"token operator\">++</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">:</span> isdone<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> next <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">properties</code> 变量保存使用 <code class=\"language-text\">Object.keys()</code> 获取的对象的属性。在 <code class=\"language-text\">next</code> 函数中，我们简单地返回了从 <code class=\"language-text\">properties</code> 中获取的每一个值并且更新了 <code class=\"language-text\">count</code>，从而使用 <code class=\"language-text\">count</code>作为索引从属性中获取下一个值。\n当 <code class=\"language-text\">count</code> 等于<code class=\"language-text\">properties</code> 长度时，迭代就会停止。</p>\n<p>通过 <code class=\"language-text\">Object</code> 来进行测试：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\no<span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token string\">\"SK\"</span>\no<span class=\"token punctuation\">.</span>me <span class=\"token operator\">=</span> <span class=\"token string\">'SKODA'</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a <span class=\"token keyword\">of</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token constant\">SK</span>\n<span class=\"token constant\">SKODA</span></code></pre></div>\n<p>成功执行了！</p>\n<p>对于普通对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> dd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    shit<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span>\n    opp<span class=\"token punctuation\">:</span> <span class=\"token number\">800</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a <span class=\"token keyword\">of</span> dd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token number\">900</span>\n<span class=\"token number\">800</span></code></pre></div>\n<p>这样我们就可以将它添加为 polyfill ，在应用中使用 <code class=\"language-text\">for..of</code>。</p>\n<h2>Using for…of on ES6 classes</h2>\n<p>我们可以使用 <code class=\"language-text\">for..of</code> 来遍历类实例中的数据列表。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Profiles</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">profiles</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>profiles <span class=\"token operator\">=</span> profiles\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> profiles <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Profiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        firstname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Nnamdi\"</span><span class=\"token punctuation\">,</span>\n        surname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Chidume\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        firstname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Philip\"</span><span class=\"token punctuation\">,</span>\n        surname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"David\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>类 <code class=\"language-text\">Profiles</code> 具有一个 <code class=\"language-text\">profile</code> 属性包含一个数组 <code class=\"language-text\">users</code> 。我们可能需要在应用程序中使用 <code class=\"language-text\">for...of</code>展示此数据。如果我们这样做：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> profiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>显然，它不能正常工作。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> profiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token operator\">^</span>\nTypeError<span class=\"token punctuation\">:</span> profiles is not iterable</code></pre></div>\n<p>需要让 <code class=\"language-text\">profiles</code> 迭代对象具有以下规则</p>\n<ul>\n<li>对象必须包含 <code class=\"language-text\">@@iterator</code> 属性</li>\n<li><code class=\"language-text\">@@iterator</code> 必须返回一个迭代器 <code class=\"language-text\">interator</code></li>\n<li><code class=\"language-text\">iterator</code> 迭代器必须有 <code class=\"language-text\">next</code>  方法的实现</li>\n</ul>\n<p>我们通过 <code class=\"language-text\">[Symbol.iterator]</code> 来定义了 <code class=\"language-text\">@@interator</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Profiles</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">profiles</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>profiles <span class=\"token operator\">=</span> profiles\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>profiles\n            <span class=\"token keyword\">let</span> propsLen <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>profiles<span class=\"token punctuation\">.</span>length\n            <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function-variable function\">next</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> propsLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> propsLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后我们执行以下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> profiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n$ node profile<span class=\"token punctuation\">.</span>js\n<span class=\"token punctuation\">{</span> firstname<span class=\"token punctuation\">:</span> <span class=\"token string\">'Nnamdi'</span><span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">:</span> <span class=\"token string\">'Chidume'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> firstname<span class=\"token punctuation\">:</span> <span class=\"token string\">'Philip'</span><span class=\"token punctuation\">,</span> surname<span class=\"token punctuation\">:</span> <span class=\"token string\">'David'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">profiles</code> 属性正确展示了。</p>\n<h2>异步迭代器（Async Iterator）</h2>\n<p>ECMAScript 2018引入了一个新的构造，以便能够遍历Promises数组，这个新构造是 <code class=\"language-text\">for-await-of</code> 和一个新的 <code class=\"language-text\">Symbol</code> <code class=\"language-text\">Symbol.asyncIterator</code>。</p>\n<p><code class=\"language-text\">Symbol.asyncIterator</code> 函数是一个可以返回 <code class=\"language-text\">promise</code> 迭代器的可迭代对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>asyncIterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">[Symbol.iterator]</code> 与 <code class=\"language-text\">[Symbol.asyncIterator]</code> 的区别在于前者返回 <code class=\"language-text\">{ value, done }</code>, 后者返回 promise resolve <code class=\"language-text\">{ value, done }</code>。</p>\n<p>上面的<code class=\"language-text\">f</code> 函数类似下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>asyncIterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">next</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token operator\">++</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">900</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">1900</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            index<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">f</code> 是异步可迭代的对象。你可以看到它返回了一个 <code class=\"language-text\">promise</code>, Promise  的 <code class=\"language-text\">resolve</code> 方法在每一个迭代中都返回了 <code class=\"language-text\">value</code>。</p>\n<p>要迭代<code class=\"language-text\">f</code>，我们将不会使用 <code class=\"language-text\">for..of</code> 而是我们将使用新的 <code class=\"language-text\">for-await-of</code>这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fAsyncLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _f <span class=\"token keyword\">of</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_f<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fAsyncLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n$ node fAsyncLoop<span class=\"token punctuation\">.</span>js\n<span class=\"token number\">900</span></code></pre></div>\n<p>我们可以使用 <code class=\"language-text\">for-await-of</code> 来循环一个 Promise 数组。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arrayOfPromises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nnamdi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chidume\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">arrayOfPromisesLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> p <span class=\"token keyword\">of</span> arrayOfPromises<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">arrayOfPromisesLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n$ node arrayOfPromisesLoop<span class=\"token punctuation\">.</span>js\nNnamdi\nChidume</code></pre></div>\n<h2>总结</h2>\n<p>在这篇文章中，我们深入挖掘了<code class=\"language-text\">for... of</code>循环。我们首先定义<code class=\"language-text\">for..of</code>是什么，然后继续看看是什么使得可迭代。然后，我们查看了JS中完整的可迭代列表，并浏览了它们中的每一个，以了解如何使用它们的循环。</p>\n<p>就像我在开始时说的那样，<code class=\"language-text\">for..of</code> 为我们节省了许多复杂性和逻辑，并有助于使我们的代码看起来更清晰，更易读。如果您还没有尝试过这种令人敬畏的<code class=\"language-text\">for</code>循环变异，我认为现在是时候这样做了。</p>\n<p>如果您对此或我应该添加，更正或删除的任何问题有任何疑问，请随时在下面发表评论，以及任何事情或DM我。谢谢阅读！ :)</p>","frontmatter":{"title":"【译文】理解 JavaScript 中的 for…of 循环","date":"December 23, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018/12-21/【译文】理解 JavaScript 中的 for…of 循环/","previous":{"fields":{"slug":"/2018/12-21/圣诞节快到了，你还在网上买圣诞彩灯吗，骚年，WS2812了解一下/"},"frontmatter":{"title":"圣诞节快到了，你还在网上买圣诞彩灯吗，骚年，WS2812了解一下"}},"next":{"fields":{"slug":"/2019/2019-01-06/2019前端学习计划清单/"},"frontmatter":{"title":"2019 前端学习计划清单"}}}}}