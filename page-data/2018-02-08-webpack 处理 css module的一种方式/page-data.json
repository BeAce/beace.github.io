{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-02-08-webpack 处理 css module的一种方式/","webpackCompilationHash":"aafb099bc401288f620b","result":{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"929119d8-caa8-5828-8d01-832ae6f09ff9","html":"<p>在实际项目开发中，会经常遇到引入第三方库和开发者自己书写的<code class=\"language-text\">css</code>处理问题。首先我采用了<code class=\"language-text\">postcss</code>的语法，借助<code class=\"language-text\">postcss</code>的语法可以实现定义变量、全局css、自动添加浏览器内核的前缀等等，除此之外，借助<code class=\"language-text\">css-loader</code>，采用css<em>module的实现方式在<code class=\"language-text\">react</code>中定义<code class=\"language-text\">className</code>，并且为了防止重复的<code class=\"language-text\">css</code>代码，采用了`[name]</em>[local]-[hash:base64:5]`的命名方式。</p>\n<!--more-->\n<h2>场景</h2>\n<p>所有的<code class=\"language-text\">css</code>都通过<code class=\"language-text\">style</code>标签的方式注入到<code class=\"language-text\">html</code>文档中，并没有通过<code class=\"language-text\">extract-text-webpack-plugin</code>来处理成css文件</p>\n<h2>疑问</h2>\n<p>在该定义场景下，这里主要谈两个问题</p>\n<ol>\n<li>一个是如何在<code class=\"language-text\">webpack</code>中分别处理vendor样式和开发者自己书写的样式</li>\n<li>另一个是如何压缩vendor样式和自己书写的样式</li>\n</ol>\n<h2>处理方式</h2>\n<p>我采用了<code class=\"language-text\">postcss</code>的两个<code class=\"language-text\">plugin</code>来处理自己的<code class=\"language-text\">css</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// postcss.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'autoprefixer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cssnano'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      preset<span class=\"token punctuation\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">autoprefixer</code> 顾名思义，是添加浏览器内核前缀使用，主要处理兼容性问题，另外，<a href=\"http://cssnano.co/\">cssnano</a>主要来处理<code class=\"language-text\">postcss</code>的<code class=\"language-text\">minify</code>。并且用<code class=\"language-text\">css-loader</code>来处理变量的命名和导入方式，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n\ttest<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span>\n\texclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n\tuse<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tloader<span class=\"token punctuation\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n\t\t\toptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tmodules<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t\t\tlocalIdentName<span class=\"token punctuation\">:</span> <span class=\"token string\">'[name]_[local]-[hash:base64:5]'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tloader<span class=\"token punctuation\">:</span> <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下图是最终的css。</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/2018/webpack-css/1.png\"></p>\n<p>在未使用<code class=\"language-text\">cssnano</code>处理之前的css</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/2018/webpack-css/2.png\"></p>\n<p>在处理完自身css的时候会出现一个问题，也就是当引用vendor的<code class=\"language-text\">css</code>时，并不希望用<code class=\"language-text\">postcss</code>来处理前缀等问题（因为vendor的<code class=\"language-text\">css</code>已经拥有了这些），甚至处理了会导致样式的错乱，即相当于手动修改了vendor的<code class=\"language-text\">css</code>，导致组件class与样式匹配不上的问题。</p>\n<h4>解决方式</h4>\n<p>其实，在<code class=\"language-text\">webpack</code>处理<code class=\"language-text\">loader</code>的时候，是会根据开发者的入口文件递归遍历，在使用<code class=\"language-text\">loader</code>时，同一个<code class=\"language-text\">loader</code>可以针对不同文件使用多次。<code class=\"language-text\">loader</code>的配置中可以通过这样的方式来区分不同文件</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过这样的方式，排除了<code class=\"language-text\">node_modules</code>下的<code class=\"language-text\">css</code>，另一个问题又出现了，排除了<code class=\"language-text\">node_modules</code>中的<code class=\"language-text\">css</code>样式之后，此时引入的css还想进行压缩或者vendor的样式库并不支持<code class=\"language-text\">css_module</code>时该如何处理？</p>\n<p>可以通过如下方式进行处理，排除掉源代码中的<code class=\"language-text\">css</code>，并且采用<code class=\"language-text\">css-loader</code>的options来定义它的处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n\ttest<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span>\n\texclude<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token regex\">/src/</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\tuse<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tloader<span class=\"token punctuation\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n\t\t\toptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tminimize<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t\t\timportLoaders<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>在<a href=\"https://github.com/postcss/postcss-loader#css-modules\">GitHub - postcss/postcss-loader: PostCSS loader for webpack</a>的文档中解释了这里的内容</p>\n<blockquote>\n<p>This loader cannot be used with CSS Modules out of the box due to the way css-loader processes file imports. To make them work properly, either add the css-loader’s importLoaders option.</p>\n</blockquote>\n<p>在<code class=\"language-text\">css-loader</code>中也有相同的解释</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.css$/</span><span class=\"token punctuation\">,</span>\n  use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        importLoaders<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 0 => no loaders (default); 1 => postcss-loader; 2 => postcss-loader, sass-loader</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'sass-loader'</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当<code class=\"language-text\">loader</code>不能够用<code class=\"language-text\">css_module</code>的方式处理的时候，需要借助<code class=\"language-text\">css-loader</code>的<code class=\"language-text\">importLoaders</code>选项来进行处理。</p>\n<p>这样，<code class=\"language-text\">webpack</code>的build速度也会提升，我这里从<strong>12s</strong>提升到了<strong>10s</strong>，最终vendor的css如下</p>\n<p><img src=\"https://images-manager.oss-cn-shanghai.aliyuncs.com/2018/webpack-css/3.png\"></p>\n<h2>总结</h2>\n<p>开发过程中总有一些外部资源不是那么尽如人意，我们需要去尽量的解耦并且做到0冲突，对于不同的位置的资源进行不同的方式的处理，但他们最终的效果应该是相同的。殊途同归，弯路再多，也只是在过程上的不同。</p>","frontmatter":{"title":"webpack 处理 css module的一种方式","date":"February 08, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-02-08-webpack 处理 css module的一种方式/","previous":{"fields":{"slug":"/2018-01-18-解析webpack plugin的生命周期，书写自己的第一个plugin/"},"frontmatter":{"title":"解析webpack plugin的生命周期，书写自己的第一个plugin"}},"next":{"fields":{"slug":"/2018-06-27-gitlab与 gitlab runner 安装问题/"},"frontmatter":{"title":"gitlab与 gitlab runner 安装问题"}}}}}