{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/02-18/CORS-preflight-fetch(request)/","webpackCompilationHash":"1893e940b14bce61c104","result":{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"779d3372-aa42-570f-82f5-0a2a0886cf28","html":"<p>跨域预检请求，术语为 CORS-preflight fetch 或 CORS-preflight requst。<strong>浏览器</strong>默认有不得跨域请求资源的限制，因此服务端往往在 response header 中加入相应的允许跨域请求的请求头，允许前端对 API 进行跨域请求。浏览器识别服务器是否允许跨域请求资源，是通过预检来完成。这篇文章，主要是来记录跨域的预检请求。</p>\n<h2>CORS-safelisted method</h2>\n<p>在服务端设置 <code class=\"language-text\">Access-Control-Allow-Origin</code> 为相应域名后，浏览器就允许按照下面这三中方法来跨域请求资源了。</p>\n<ul>\n<li>GET</li>\n<li>HEAD</li>\n<li>POST</li>\n</ul>\n<p>也就是说，在服务端设置 <code class=\"language-text\">Access-Control-Allow-Origin</code>，资源就允许通过以上三种方法进行跨域访问。</p>\n<p>以下示例。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> server.js server2.js index.html</code></pre></div>\n<p>在 <code class=\"language-text\">server.js</code> 中起一个基础的服务，为 <code class=\"language-text\">3000</code> 端口，作为服务端来提供资源</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:3001'</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server is listening on port: 3000...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 <code class=\"language-text\">server2.js</code> 中再起一个基础的服务，为 <code class=\"language-text\">3001</code> 端口，作为客户端渲染 <code class=\"language-text\">HTML</code>，并且请求 <code class=\"language-text\">3000</code> 端口资源。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:3001'</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3001</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server is listening on port: 3001...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>CORS-preflight<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>CORS-preflight<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        method<span class=\"token punctuation\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// OR GET HEAD</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>启动服务后进入 <a href=\"http://localhost:3001\">http://localhost:3001</a> 可以看到，可以正常访问到 <code class=\"language-text\">3000</code> 端口的资源。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/cors-preflight/1.png\"></p>\n<p>可以尝试将方法改为 <code class=\"language-text\">GET</code> 和 <code class=\"language-text\">HEAD</code>。</p>\n<p>浏览器认为如果不是以上的安全请求方法，都会在实际请求 API 时会发出 method 为 <code class=\"language-text\">OPTIONS</code> 的预检请求。并且，对请求的方法有如下限制，以下称为 CORS 安全方法。</p>\n<p>我们来修改下 <code class=\"language-text\">index.html</code> 中 fetch API 中的 method，这里改为 <code class=\"language-text\">PUT</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tmethod<span class=\"token punctuation\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>刷新页面，可以看到浏览器抛出了错误。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/cors-preflight/2.png\"></p>\n<p>并且 devtool 中也可以看出事先发出了 <code class=\"language-text\">OPTIONS</code> 请求，虽然在 response 中可以看到数据，但是在代码中，获取不到实际的数据。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/cors-preflight/3.png\"></p>\n<p>浏览器明确地提示，<code class=\"language-text\">Method PUT</code> 是不被允许的。或者更加明确地说，浏览器的预检（preflight）请求中没有接受到服务器返回的 <code class=\"language-text\">Access-Control-Allow-Methods</code> 中包含该方法。</p>\n<p>修改 <code class=\"language-text\">server.js</code> 中的代码，在增加 header</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Methods'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>重启服务器后可以看到，有两个请求发送，一个还是浏览器的预检请求，另外，则是 <code class=\"language-text\">PUT</code>,并成功返回了数据。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/cors-preflight/4.png\"></p>\n<p>除了<code class=\"language-text\">PUT</code>之外，通常来讲，还有 <code class=\"language-text\">DELETE</code> 等方法，在实际开发中，会一并加上。</p>\n<h2>CORS-safelisted request-header</h2>\n<p>除了 method 之外，CORS 还对请求头有一些限制。其中除以下请求头之外，其他的都会被block掉。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">accept\naccept-language\nconent-languate\ncontent-type</code></pre></div>\n<h3>Content-Type</h3>\n<p>对于 <code class=\"language-text\">content-type</code>  而言，也有以下限制。只允许以下三种。</p>\n<ul>\n<li>text/plain</li>\n<li>multipart/form-data</li>\n<li>application/x-www-form-urlencoded</li>\n</ul>\n<p>我们来修改 <code class=\"language-text\">index.html</code> ，在 fetch 的 headers 中加入 content-type</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tmethod<span class=\"token punctuation\">:</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span>\n\theaders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\tbody<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\thello<span class=\"token punctuation\">:</span> <span class=\"token string\">'world'</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>刷新浏览器，可以看到浏览器明确指出请求头 <code class=\"language-text\">content-type</code>  是不被允许的。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/cors-preflight/5.png\"></p>\n<p>我们来修改下 <code class=\"language-text\">server.js</code> ，增加 <code class=\"language-text\">content-type</code> 为 <code class=\"language-text\">application/json</code> 的请求头。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Headers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>重启服务，刷新浏览器，可以看到 <code class=\"language-text\">Content-Type</code> 为 <code class=\"language-text\">application/json</code>的可以成功接收到返回。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/cors-preflight/6.png\"></p>\n<h3>Custom-header</h3>\n<p>如果是自定义的 header 呢，比如我们需要传递给服务器一个 token 来标识用户身份，修改 index.html</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tmethod<span class=\"token punctuation\">:</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span>\n\theaders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'X-Auth-Token'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'auth-token'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\tbody<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\thello<span class=\"token punctuation\">:</span> <span class=\"token string\">'world'</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>刷新浏览器，发现，会有上面同样的错误：不允许 <code class=\"language-text\">x-auth-token</code>。同样，修改 server.js 在，setHeader中追加</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Headers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Content-Type,X-Auth-Token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果以上设置太麻烦，可以通过<code class=\"language-text\">*</code>来设置。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Headers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Access-Control-Max-Age</h2>\n<p>如此重复地去发送预检请求，并不是一个好的方式。可以通过设置过期时间的方式，在保证安全的情况下在固定时间避免重复地检查。</p>\n<p>修改 <code class=\"language-text\">server.js</code> ,在 header 中设置 <code class=\"language-text\">Access-Control-Max-Age</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Max-Age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们约定，在10s内不再检查。重启服务，刷新浏览器。</p>\n<p><img src=\"https://imgs.beacelee.com/2019/cors-preflight/7.png\"></p>\n<p>可以看到，第一次还是进行了预检请求，10s内刷新浏览器，直接请求了 API，10s后再次刷新，预检之后发起了请求。</p>","frontmatter":{"title":"CORS-preflight fetch(request)","date":"February 18, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/02-18/CORS-preflight-fetch(request)/","previous":{"fields":{"slug":"/2019/01-24/鲜为人知的JavaScript特性/"},"frontmatter":{"title":"【译文】鲜为人知的JavaScript特性"}},"next":{"fields":{"slug":"/2019/04-18/git-hooks/"},"frontmatter":{"title":"如何通过 githooks 强制规范 git commit message"}}}}}