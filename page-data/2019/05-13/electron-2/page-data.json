{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/05-13/electron-2/","webpackCompilationHash":"aafb099bc401288f620b","result":{"data":{"site":{"siteMetadata":{"title":"Beace Blog","author":"Beace Lee"}},"markdownRemark":{"id":"eaa6c204-30ab-50b5-972e-fe4b408c356f","html":"<h2>如何关联后缀名打开相应应用程序？</h2>\n<p>Electron-build 配置中<code class=\"language-text\">fileAissociations：ext</code>  配置可以实现关联后缀名。也可以配置为数组，支持多个文件后缀名。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"fileAssociations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"ext\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"kmdb\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>如何自定义协议打开 electron</h2>\n<p>在 main 进程中增加如下代码，即可通过 <code class=\"language-text\">myapp://</code> 的方式打开。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">setAsDefaultProtocolClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myapp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>如何针对多页面，多个html进行打包</h2>\n<p>如果需要多个页面，即多个 window ，需要通过 webpack 创建多页面应用的打包构建环境，在开发环境中，也需要手动指定路径。即在 <code class=\"language-text\">.html</code> 中往往有如下配置。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">scripts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/dist/renderer.dev.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>page<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.js`</span></span></code></pre></div>\n<h2>如何利用 IPC 优雅升级，升级通知手动升级，升级检查？</h2>\n<p>自动更新使用 <code class=\"language-text\">electron-updater</code>, 往往在 main 中添加如下代码即可</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> autoUpdater <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'electron-updater'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppUpdater</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">;</span>\n    autoUpdater<span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> log<span class=\"token punctuation\">;</span>\n    autoUpdater<span class=\"token punctuation\">.</span><span class=\"token function\">checkForUpdatesAndNotify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如何为了更加自由和主动，需要用户手动触发更新。则需要将自动下载关闭。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">updater</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sendStatusToWindow</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  log<span class=\"token punctuation\">.</span>transports<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span><span class=\"token punctuation\">;</span>\n  autoUpdater<span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> log<span class=\"token punctuation\">;</span>\n  autoUpdater<span class=\"token punctuation\">.</span>autoDownload <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  autoUpdater<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'checking-for-update'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Checking for update...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sendStatusToWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'checking-for-update'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> e <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  autoUpdater<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'update-available'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">info</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sendStatusToWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'update-available'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> info <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">'更新'</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`发现新版本 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>info<span class=\"token punctuation\">.</span>version<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// autoUpdater.on('update-not-available', (ev, info) => {</span>\n  <span class=\"token comment\">//   log.warn('Update not available.', ev, info);</span>\n  <span class=\"token comment\">//   sendStatusToWindow('Update not available.');</span>\n  <span class=\"token comment\">// });</span>\n  <span class=\"token comment\">// autoUpdater.on('error', (ev, err) => {</span>\n  <span class=\"token comment\">//   log.warn('Error in auto-updater.', ev, err);</span>\n  <span class=\"token comment\">//   sendStatusToWindow('Error in auto-updater.');</span>\n  <span class=\"token comment\">// });</span>\n  autoUpdater<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'download-progress'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">progressObj</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sendStatusToWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'download-progress'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        progress<span class=\"token punctuation\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>progressObj<span class=\"token punctuation\">.</span>percent<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        logMessage\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  autoUpdater<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'update-downloaded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ev<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sendStatusToWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'update-downloaded'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  autoUpdater<span class=\"token punctuation\">.</span><span class=\"token function\">checkForUpdates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  ipcMain<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'update-now'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    autoUpdater<span class=\"token punctuation\">.</span><span class=\"token function\">downloadUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  ipcMain<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'quit-and-install'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    autoUpdater<span class=\"token punctuation\">.</span><span class=\"token function\">quitAndInstall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>如何利用 <code class=\"language-text\">grpc</code> 进行通信？<code class=\"language-text\">node_grpc</code> 与 electron 版本该如何选择？</h2>\n<p>查看 node grpc 中 release 版本信息修复的问题对应的electron版本。或者将electron直接升级到 5.0后使用 grpc 最新版本1.20.3。参考以下链接：\n<a href=\"https://github.com/grpc/grpc-node/releases/tag/grpc%401.20.3\">https://github.com/grpc/grpc-node/releases/tag/grpc%401.20.3</a></p>\n<h2>如何注册右键事件，双击事件，仿navtive事件</h2>\n<p>利用 window 对象的 <code class=\"language-text\">contenxtmenu</code> 事件</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'contextmenu'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    menu<span class=\"token punctuation\">.</span><span class=\"token function\">popup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> window<span class=\"token punctuation\">:</span> remote<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>如何阻止实例多开？</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> shouldQuit <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">makeSingleInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">commandLine<span class=\"token punctuation\">,</span> workingDirectory</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Someone tried to run a second instance, we should focus our window.</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mainWindow<span class=\"token punctuation\">.</span><span class=\"token function\">isMinimized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> mainWindow<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   mainWindow<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   mainWindow<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldQuit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>IPC sendSync 与 send 的区别？</h2>\n<p><code class=\"language-text\">sendSync</code> 同步消息到主进程，会阻塞整个渲染进程，会造成 electron “假死” 现象，应避免使用，使用 send。</p>\n<blockquote>\n<p>发送同步消息将会阻塞整个渲染进程，你应该避免使用这种方式 - 除非你知道你在做什么。</p>\n</blockquote>\n<h2>electron 在 OSX/ windows下的打包签名策略？</h2>\n<p>如何使用 electron-builder 对 electron 打包签名，windows 下需要指定证书的指纹或 cn。考虑到 windows 会出现乱码情况，最佳方式是通过指定证书指纹。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"win\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"nsis\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"certificateSha1\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"EA47125B255A0CD0D37AB4937CFCCE2DBC26D6B1\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>OSX 下，可以将证书 base64 编码后，通过环境变量的方式签名。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">CSC_LINK=$CSC_LINK CSC_KEY_PASSWORD=$CSC_KEY_PASSWORD yarn package</code></pre></div>\n<h2>基于 gitlab-runner 的 electron CI 构建流程？</h2>\n<p>为了和本地开发环境保持一致，在整个 CI 过程中与本地开发配置一样。</p>\n<p>首先安装相应的依赖，同时，借助 electron builder 将证书及相关配置项通过环境变量和配置文件的方式指定。在 gitlab 下，需要通过 shell 对 OSX 和 windows 进行打包。同时会生成 latest.yml (windows), latest-mac.yml(Mac),latest-linux.yml(linux) , 同时对应三个平台的自动更新配置文件。可以上传到 CDN。</p>\n<h2>如何接入 brew cask ?</h2>\n<p>需要按照 brew cask 给出的提示，进行相应的pr提交，提交之后被 merge ，就可以通过 <code class=\"language-text\">brew cask install xxx</code> 进行按照 dmg 了。brew cask 的脚本如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">cask <span class=\"token string\">'keymanager'</span> <span class=\"token keyword\">do</span>\n  version <span class=\"token string\">'1.2.16'</span>\n  sha256 <span class=\"token string\">'f2e200b1da061bf7a53898c4cb41f4f79fe1e89cb49fdbb923f9bffcd08ff2e9'</span>\n  <span class=\"token comment\"># keymanager.trustasia.com was verified as official when first introduced to the cask</span>\n  url <span class=\"token string\">\"https://keymanager.trustasia.com/release/KeyManager-<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>version<span class=\"token delimiter tag\">}</span></span>.dmg\"</span>\n  name <span class=\"token string\">'KeyManager'</span>\n  homepage <span class=\"token string\">'https://keymanager.org/'</span>\n  app <span class=\"token string\">'KeyManager.app'</span>\n<span class=\"token keyword\">end</span></code></pre></div>","frontmatter":{"title":"Electron 十问十答（2）","date":"May 13, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/05-13/electron-2/","previous":{"fields":{"slug":"/2019/04-18/git-hooks/"},"frontmatter":{"title":"如何通过 githooks 强制规范 git commit message"}},"next":{"fields":{"slug":"/2019/06-24/GMTC/"},"frontmatter":{"title":"GMTC 全球大前端大会总结"}}}}}